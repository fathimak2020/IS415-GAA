---
title: "Hands-on Exercise 3: 1st & 2nd Order Spatial Point Patterns Analysis Methods"
execute: 
  warning: false
  freeze: true
date: "`r format(Sys.Date(), '%Y-%m-%d')`"
---

# 3.1 Overview

Spatial Point Pattern Analysis involves examining the pattern or distribution of a group of points on a surface. These points may represent:

-   Occurrences like crime incidents, traffic accidents, or the onset of diseases

-   Business-related points such as coffee shops and fast-food outlets, or essential services like childcare and eldercare facilities.

Using appropriate functions of spatstat, this hands-on exercise aims to discover the spatial point processes of childcare centres in Singapore.

The specific questions we aim to address are:

-   Is there a random distribution of childcare centers across Singapore?

-   If not, the subsequent question becomes identifying the areas where there is a higher concentration of childcare centers.

# 3.2 Datasets

-   [`CHILDCARE`](https://beta.data.gov.sg/collections/2064/datasets/d_61eefab99958fd70e6aab17320a71f1c/view): a point feature data providing both location and attribute information of childcare centres

-   [`MP14_SUBZONE_WEB_PL`](https://beta.data.gov.sg/datasets/d_5cb80a95445f236737f6bc2bfe5f159d/view): a polygon feature data providing information of URA 2014 Master Plan Planning Subzone boundary data

-   `CostalOutline`: a polygon feature data showing the national boundary of Singapore

# 3.3 R Packages

The following R packages will be used:

-   [**sf**](https://r-spatial.github.io/sf/), designed to import, manage and process vector-based geospatial data in R.

-   [**spatstat**](https://spatstat.org/), functions for point pattern analysis

-   [**raster**](https://cran.r-project.org/web/packages/raster/) reads, writes, manipulates, analyses and model of gridded spatial data (i.e. raster)

-   [**maptools**](https://cran.r-project.org/web/packages/maptools/) provides tools for manipulating geographic data

-   [**tmap**](https://cran.r-project.org/web/packages/tmap/) provides functions for plotting cartographic quality static point patterns maps or interactive maps by using [leaflet](https://leafletjs.com/) API.

```{r}
install.packages("maptools", repos = "https://packagemanager.posit.co/cran/2023-10-13")

pacman::p_load(sf, spatstat, raster, maptools, tmap)

```

# 3.4 Spatial Data Wrangling

## 3.4.1 Importing Spatial Data

`st_read()` from sf package will be used to import these three geospatial data sets into R.

Locations and Attributes of Childcare Centres

```{r}
childcare_sf <- st_read("data/aspatial/PreSchoolsLocation.geojson") %>% 
  st_transform(crs = 3414)
```

URA 2014 Master Plan Planning Subzone Boundaries

```{r}
mpsz_sf <- st_read(dsn = "data/geospatial",
                   layer = "MP14_SUBZONE_WEB_PL")
```

National Boundary of Singapore

```{r}
sg_sf <- st_read(dsn = "data/geospatial", layer="CostalOutline")
```

## 3.4.1.1 Map Projection

Before we can use these data for analysis, it is important for us to ensure that they are projected in same projection system.

```{r}
st_crs(childcare_sf)
```

```{r}
st_crs(mpsz_sf)
```

```{r}
st_crs(sg_sf)
```

Except childcare_sf, both mpsz_sf and sg_sf do not have proper CRS information.

Hence, the correct CRS must be assigned to mpsz_sf and sg_sf

```{r}
mpsz_sf <- st_set_crs(mpsz_sf, 3414)
st_crs(mpsz_sf)
```

```{r}
sg_sf <- st_set_crs(sg_sf, 3414)
st_crs(sg_sf)
```

## 3.4.2 Mapping Geospatial Datasets

It is also useful for us to plot a map to show their spatial patterns.

```{r}
tm_shape(mpsz_sf) +
  tm_polygons() +
tm_shape(childcare_sf) +
  tm_symbols(size = 0.02, col = "black")
```

We can also prepare a pin map by using the code chunk below.

```{r}
tmap_mode("view") #set to interactive
tm_shape(childcare_sf) +
  tm_dots()
```

```{r}
tmap_mode('plot') #to return to default 
```

In interactive mode, tmap is using leaflet for R API.We can also query the information of each simple feature by clicking on them. We can also change the background of the internet map layer. Three internet map layers are provided - ESRI.WorldGrayCanvas (default) - OpenStreetMap - ESRI.WorldTopoMap

# 3.5 Geospatial Data Wrangling

Although sf data frame is gaining popularity against sp’s Spatial\* classes, many geospatial analysis packages still require the input geospatial data to be in sp’s Spatial\* classes.

## 3.5.1 Converting sf data frames to sp’s Spatial\* class

Converting sf DataFrames to sp’s Spatial\* Class

The code chunk below uses `as_Spatial()` of sf package to convert the three geospatial data from simple feature data frame to sp’s Spatial\* class.

```{r}
childcare <- as_Spatial(childcare_sf)
mpsz <- as_Spatial(mpsz_sf)
sg <- as_Spatial(sg_sf)
```

The following are the information of the three Spatial\* classes.

```{r}
childcare
```

```{r}
mpsz
```

```{r}
sg
```

## 3.5.2 Converting Spatial\* class into Generic sp Format

spatstat requires the analytical data in ppp object form. We need to convert the Spatial classes\* into Spatial object.

The codes chunk below converts the Spatial\* classes into generic sp objects.

```{r}
childcare_sp <- as(childcare, "SpatialPoints")
sg_sp <- as(sg, "SpatialPolygons")
```

The properties of the sp objects are as follow:

```{r}
childcare_sp
```

```{r}
sg_sp
```

## 3.5.3 Converting Generic sp Format into spatstat’s ppp Format

Now, we will use `as.ppp()` of spatstat to convert the spatial data into spatstat’s ppp object format.

```{r}
childcare_ppp <- as(childcare_sp, "ppp")
childcare_ppp
```

```{r}
plot(childcare_ppp)
```

This shows the summary statistics of the childcare_ppp object.

```{r}
summary(childcare_ppp)
```

## 3.5.4 Handling Duplicated Points

The duplication in a ppp object can be checked by using the code chunk below.

```{r}
any(duplicated(childcare_ppp))
```

To count the number of co-indicence point, `multiplicity()` can be used.

```{r}
multiplicity(childcare_ppp)
```

If we want to know how many locations have more than one point event, we can use the code chunk below.

```{r}
sum(multiplicity(childcare_ppp) > 1)
```

The output shows that there are 128 duplicated points.

To view the locations of these duplicate point events, we will plot childcare data by using the code below.

```{r}
tmap_mode("view")
tm_shape(childcare) +
  tm_dots(alpha = 0.4,
          size = 0.05)
```

```{r}
tmap_mode("plot")
```

There are three ways to overcome this problem.

1.  The easiest way is to **delete the duplicates**. But, that will also mean that some useful point events will be lost.
2.  The second solution is use **jittering**, which will add a small perturbation to the duplicate points so that they do not occupy the exact same space.
3.  The third solution is to make each point “unique” and then attach the duplicates of the points to the patterns as marks, as attributes of the points. Then you would need analytical techniques that take into account these marks.

The code chunk below implements the **jittering** approach.

```{r}
childcare_ppp_jit <- rjitter(childcare_ppp,
                             retry = TRUE,
                             # No. of simulated realisations to be generated
                             nsim = 1, 
                             drop = TRUE)
```

Check if any duplicated point remains in the geospatial data.

```{r}
any(duplicated(childcare_ppp_jit))
```

## 3.5.5 Creating owin Object

When analysing spatial point patterns, it is a good practice to confine the analysis with a geographical area like Singapore boundary. In spatstat, an object called **owin** is specially designed to represent this polygonal region.

The code chunk below is used to covert sg SpatialPolygon object into owin object of spatstat.

```{r}
sg_owin <- as(sg_sp, "owin")
```

The ouput object can be displayed by using `plot()`

```{r}
plot(sg_owin)
```

and `summary()` function of Base R.

```{r}
summary(sg_owin)
```

## 3.5.6 Combining Point Events Object and owin Object

In this last step of geospatial data wrangling, we will extract childcare events that are located within Singapore by using the code chunk below.

```{r}
childcareSG_ppp = childcare_ppp[sg_owin]
```

The output object combined both the point and polygon feature in one ppp object class as shown below.

```{r}
summary(childcareSG_ppp)
```

Using `plot()`, the childcareSG_ppp object can be displayed.

```{r}
plot(childcareSG_ppp)
```

# 3.6 First-order Spatial Point Patterns Analysis

In this section, we will perform first-order SPPA by using spatstat package.

The hands-on exercise will focus on:

-   deriving kernel density estimation (KDE) layer for visualising and exploring the intensity of point processes
-   performing Confirmatory Spatial Point Patterns Analysis by using Nearest Neighbour statistics

## 3.6.1 Kernel Density Estimation

In this section, we will compute the kernel density estimation (KDE) of childcare services in Singapore.

## 3.6.1.1 Computing Kernel Density Estimation using Automatic Bandwidth Selection Method

The code chunk below computes a kernel density by using the following configurations of [`density()`](https://rdrr.io/cran/spatstat/man/density.ppp.html) of **spatstat**:

-   [`bw.diggle()`](https://rdrr.io/cran/spatstat/man/bw.diggle.html) **automatic bandwidth selection method**. Other recommended methods are [`bw.CvL()`](https://rdrr.io/cran/spatstat/man/bw.CvL.html), [`bw.scott()`](https://rdrr.io/cran/spatstat/man/bw.scott.html) or [`bw.ppl()`](https://rdrr.io/cran/spatstat/man/bw.ppl.html).

-   The smoothing kernel used is *gaussian*, which is the default. Other smoothing methods are: “epanechnikov”, “quartic” or “disc”.

-   The intensity estimate is corrected for edge effect bias by using method described by Jones (1993) and Diggle (2010, equation 18.9). The default is *FALSE*.

    ```{r}
    kde_childcareSG_bw <- density(childcareSG_ppp,
                                  sigma = bw.diggle, # determines the area of influence of the estimation
                                  edge = TRUE,
                                  kernel = "gaussian")
    ```

The *`plot()`* function of Base R is then used to display the kernel density derived.

```{r}
plot(kde_childcareSG_bw)

```

The density values of the output range from 0 to 0.000035, which is way too small to comprehend. This is because the default unit of measurement of SVY21 is in [**meter**]{.underline}. As a result, the density values computed is in “number of points per square meter”.

Before moving on, it is good to know that you can retrieve the bandwidth used to compute the KDE layer by using the code chunk below.

```{r}
bw <- bw.diggle(childcareSG_ppp)
bw
```

## 3.6.1.2 Rescalling KDE values

In the code chunk below, `rescale()` is used to covert the unit of measurement from meter to kilometer for a better scale.

```{r}
childcareSG_ppp.km <- rescale(childcareSG_ppp, 1000, "km")
```

Now, we can re-run `density()` using the resale data set and plot the output KDE map.

```{r}
kde_childcareSG.bw <- density(childcareSG_ppp.km,
                              sigma = bw.diggle,
                              edge = TRUE,
                              kernel = "gaussian")
plot(kde_childcareSG.bw)
```

The output image looks identical to the earlier version, the only changes in the data values in the legend.

## 3.6.2 Working with Different Automatic Bandwidth Methods

Beside `bw.diggle()`, there are three other spatstat functions can be used to determine the bandwidth, they are: `bw.CvL()`, `bw.scott()`, and `bw.ppl()`.

Let’s look at the bandwidth return by these automatic bandwidth calculation methods by using the code chunk below.

```{r}
bw.diggle(childcareSG_ppp.km)
```

```{r}
bw.CvL(childcareSG_ppp.km)
```

```{r}
bw.scott(childcareSG_ppp.km)
```

```{r}
bw.ppl(childcareSG_ppp.km)
```

The code chunk below will be used to compare the output of using bw.diggle and bw.ppl methods.

```{r}
kde_childcareSG.ppl <- density(childcareSG_ppp.km,
                               sigma = bw.ppl,
                               edge = TRUE,
                               kernel = "gaussian")
par(mfrow = c(1,2))
plot(kde_childcareSG_bw, main = "bw.diggle")
plot(kde_childcareSG.ppl, main = "bw.ppl")
```

## 3.6.3 Working with Different Kernel Methods

By default, the kernel method used in `density.ppp()` is gaussian. But there are three other options, namely: Epanechnikov, Quartic and Disc.

The code chunk below will be used to compute three more kernel density estimations by using these three kernel function.

```{r}
par(mfrow = c(2,2))
plot(density(childcareSG_ppp.km,
             sigma = bw.ppl,
             edge = TRUE,
             kernel = "gaussian"),
     main = "Gaussian")
plot(density(childcareSG_ppp.km, 
             sigma = bw.ppl,
             edge = TRUE,
             kernel = "epanechnikov"),
     main = "Epanechnikov")
plot(density(childcareSG_ppp.km,
             sigma = bw.ppl,
             edge = TRUE,
             kernel = "quartic"),
     main = "Quartic")
plot(density(childcareSG_ppp.km,
             sigma = bw.ppl,
             edge = TRUE,
             kernel = "disc"),
     main = "Disc")
```

# 3.7 Fixed and Adaptive KDE

## 3.7.1 Computing KDE by Using Fixed Bandwidth

Now we compute a KDE layer by defining a bandwidth of 600 meter. The sigma value used is 0.6. This is because the unit of measurement of childcareSG_ppp.km object is in kilometer, hence the 600m is 0.6km.

```{r}
kde_childcareSG_600 <- density(childcareSG_ppp.km,
                               sigma = 0.6,
                               edge = TRUE,
                               kernal = "gaussian")
plot(kde_childcareSG_600)
```

## 3.7.2 Computing KDE by using Adaptive Bandwidth

Fixed bandwidth method is very sensitive to highly skew distribution of spatial point patterns over geographical units, for example urban versus rural. One way to overcome this problem is by using adaptive bandwidth instead.

In this section, you will learn how to derive adaptive kernel density estimation by using `density.adaptive()` of spatstat.

```{r}
kde_childcareSG_adaptive <- adaptive.density(childcareSG_ppp.km, method = "kernel")
plot(kde_childcareSG_adaptive)
```

The fixed and adaptive kernel density estimation outputs can be compared by using the code chunk below.

```{r}
par(mfrow = c(1,2))
plot(kde_childcareSG.bw, main = "Fixed Bandwidth")
plot(kde_childcareSG_adaptive, main = "Adaptive Bandwidth")
```

## 3.7.3 Converting KDE Output into Grid Object

Same results, just converted for mapping purposes

```{r}
gridded_kde_childcareSG_bw <- as.SpatialGridDataFrame.im(kde_childcareSG.bw)
spplot(gridded_kde_childcareSG_bw)
```

## 3.7.3.1 Converting Gridded Output into Raster

Next, we will convert the gridded kernal density objects into RasterLayer object by using `raster()` of raster package.

```{r}
kde_childcareSG_bw_raster <- raster(gridded_kde_childcareSG_bw)
kde_childcareSG_bw_raster
```

## 3.7.3.2 Assigning Projection Systems

The code chunk below will be used to include the CRS information on kde_childcareSG_bw_raster RasterLayer.

```{r}
projection(kde_childcareSG_bw_raster) <- CRS("+init=EPSG:3414")
kde_childcareSG_bw_raster
```

## 3.7.4 Visualising the Output in tmap

Finally, the raster will be displayed in cartographic quality map using `tmap` package.

```{r}
tm_shape(kde_childcareSG_bw_raster) +
  tm_raster("v") +
  tm_layout(legend.position = c("right", "bottom"), frame = FALSE)
```

## 3.7.5 Comparing Spatial Point Patterns using KDE

In this section, we will compare KDE of childcare at Punggol, Tampines, Chua Chu Kang and Jurong West planning areas.

## 3.7.5.1 Extracting Study Area

The code chunk below will be used to extract the target planning areas.

```{r}
pg = mpsz[mpsz@data$PLN_AREA_N == "PUNGGOL",]
tm = mpsz[mpsz@data$PLN_AREA_N == "TAMPINES",]
ck = mpsz[mpsz@data$PLN_AREA_N == "CHOA CHU KANG",]
jw = mpsz[mpsz@data$PLN_AREA_N == "JURONG WEST",]
```

Plotting target planning areas

```{r}
par(mfrow = c(2,2))
plot(pg, main = "Punggol")
plot(tm, main = "Tampines")
plot(ck, main = "Choa Chu Kang")
plot(jw, main = "Jurong West")
```

## 3.7.5.2 Converting Spatial Point DataFrame into Generic sp Format

Next, these SpatialPolygonsDataFrame layers will be converted into generic spatialpolygons layers.

```{r}
pg_sp = as(pg, "SpatialPolygons")
tm_sp = as(tm, "SpatialPolygons")
ck_sp = as(ck, "SpatialPolygons")
jw_sp = as(jw, "SpatialPolygons")
```

## 3.7.5.3 Creating owin Object

Now, these SpatialPolygons objects will be converted into owin objects that is required by spatstat.

```{r}
pg_owin = as(pg_sp, "owin")
tm_owin = as(tm_sp, "owin")
ck_owin = as(ck_sp, "owin")
jw_owin = as(jw_sp, "owin")
```

## 3.7.5.4 Combining Childcare Points and the Study Area

By using the code chunk below, childcare centres within the specific region can be extracted for later analysis.

```{r}
childcare_pg_ppp = childcare_ppp_jit[pg_owin]
childcare_tm_ppp = childcare_ppp_jit[tm_owin]
childcare_ck_ppp = childcare_ppp_jit[ck_owin]
childcare_jw_ppp = childcare_ppp_jit[jw_owin]
```

Next, `rescale()` is used to trasnform the unit of measurement from metre to kilometre.

```{r}
childcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, "km")
childcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, "km")
childcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, "km")
childcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, "km")
```

The code chunk below is used to plot these four study areas and the locations of the childcare centres.

```{r}
par(mfrow=c(2,2))
plot(childcare_pg_ppp.km, main="Punggol")
plot(childcare_tm_ppp.km, main="Tampines")
plot(childcare_ck_ppp.km, main="Choa Chu Kang")
plot(childcare_jw_ppp.km, main="Jurong West")
```

## 3.7.5.5 Computing KDE

The code chunk below will be used to compute the KDE of these four planning area. `bw.diggle` method will be used to derive the bandwidth of each area.

```{r}
par(mfrow = c(2,2))
plot(density(childcare_pg_ppp.km,
             sigma = bw.diggle,
             edge = TRUE,
             kernel = "gaussian"),
     main = "Punggol")
plot(density(childcare_tm_ppp.km,
             sigma = bw.diggle,
             edge = TRUE,
             kernel = "gaussian"),
     main = "Tampines")
plot(density(childcare_ck_ppp.km,
             sigma = bw.diggle,
             edge = TRUE,
             kernel = "gaussian"),
     main = "Choa Chu Kang")
plot(density(childcare_jw_ppp.km,
             sigma = bw.diggle,
             edge = TRUE,
             kernel = "gaussian"),
     main = "Jurong West")
```

## 3.7.5.6 Computing Fixed Bandwidth KDE

For comparison purposes, 250m is used as the bandwidth.

```{r}
par(mfrow=c(2,2))
plot(density(childcare_ck_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Choa Chu Kang")
plot(density(childcare_jw_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Jurong West")
plot(density(childcare_pg_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Punggol")
plot(density(childcare_tm_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Tampines")
```

# 3.8 Nearest Neighbour Analysis

In this section, Clark-Evans test of aggregation for a spatial point pattern will be performed using `clarkevans.test()` of statspat.

The test hypotheses are:

-   Ho = The distribution of childcare services are randomly distributed.
-   H1= The distribution of childcare services are not randomly distributed.
-   The 95% confident interval will be used.

## 3.8.1 Testing Spatial Point Patterns using Clark-Evans Test

```{r}
clarkevans.test(childcareSG_ppp,
                correction = "none", 
                clipregion = "sg_owin", 
                alternative = c("clustered"), 
                nsim = 99) # Number of Monte Carlo simulations to perform
```

## 3.8.2 Clark and Evans Test: Choa Chu Kang planning area

In the code chunk below, `clarkevans.test()` of spatstat is used to performs Clark-Evans test of aggregation for childcare centre in Choa Chu Kang planning area.

```{r}
clarkevans.test(childcare_ck_ppp,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
```

## 3.8.3 Clark and Evans Test: Tampines planning area

In the code chunk below, the similar test is used to analyse the spatial point patterns of childcare centre in Tampines planning area.

```{r}
clarkevans.test(childcare_tm_ppp,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
```

# 3.9 **Second-order Spatial Point Patterns Analysis**

# 3.10 **Analysing Spatial Point Process Using G-Function**

The G function measures the distribution of the distances from an arbitrary event to its nearest event. In this section, you will learn how to compute G-function estimation by using [*Gest()*](https://rdrr.io/cran/spatstat/man/Gest.html) of **spatstat** package. You will also learn how to perform monta carlo simulation test using [*envelope()*](https://rdrr.io/cran/spatstat/man/envelope.html) of **spatstat** package.

## **3.10.1 Choa Chu Kang Planning Area**

## 3.10.1.1 Computing G-function Estimation

The code chunk below is used to compute G-function using *`Gest()`* of **spatat** package.

```{r}
G_CK = Gest(childcare_ck_ppp, correction = "border") 
```

```{r}
plot(G_CK, xlim=c(0,500))
```

## 3.10.1.2 Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

-   Ho = The distribution of childcare services at Choa Chu Kang are **randomly distributed**.

-   H1= The distribution of childcare services at Choa Chu Kang are **not randomly distributed.**

-   The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

Monte Carlo test with G-function

```{r}
G_CK.csr <- envelope(childcare_ck_ppp, Gest, nsim = 999)
```

```{r}
plot(G_CK.csr)
```

## **3.10.2 Tampines Planning Area**

## 3.10.2.1 Computing G-function Estimation

```{r}
G_tm = Gest(childcare_tm_ppp, correction = "best") 
```

```{r}
plot(G_tm)
```

## 3.10.2.2 Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

-   Ho = The distribution of childcare services at Tampines are **randomly distributed.**

-   H1= The distribution of childcare services at Tampines are **not randomly distributed.**

-   The null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.

The code chunk below is used to perform the hypothesis testing.

```{r}
G_tm.csr <- envelope(childcare_tm_ppp, Gest, correction = "all", nsim = 999)
```

```{r}
plot(G_tm.csr)
```

# **3.11 Analysing Spatial Point Process Using F-Function**

The F function estimates the empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary shape. In this section, you will learn how to compute F-function estimation by using [*`Fest()`*](https://rdrr.io/cran/spatstat/man/Fest.html) of **spatstat** package. You will also learn how to perform monta carlo simulation test using [*`envelope()`*](https://rdrr.io/cran/spatstat/man/envelope.html) of **spatstat** package.

## **3.11.1 Choa Chu Kang Planning Area**

## 3.11.1.1 Computing F-function Estimation

The code chunk below is used to compute F-function using *`Fest()`* of **spatat** package.

```{r}
F_CK = Fest(childcare_ck_ppp)
```

```{r}
 plot(F_CK)
```

## **3.11.2 Performing Complete Spatial Randomness Test**

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

-   Ho = The distribution of childcare services at Choa Chu Kang are **randomly distributed.**

-   H1= The distribution of childcare services at Choa Chu Kang are **not randomly distributed.**

-   The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

Monte Carlo test with F-function

```{r}
F_CK.csr <- envelope(childcare_ck_ppp, Fest, nsim = 999)
```

```{r}
plot(F_CK.csr)
```

## **3.11.3 Tampines Planning Area**

## 3.11.3.1 Computing F-function Estimation

Monte Carlo test with F-function

```{r}
F_tm = Fest(childcare_tm_ppp, correction = "best") 
```

```{r}
plot(F_tm)
```

## 3.11.3.2 Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

-   Ho = The distribution of childcare services at Tampines are **randomly distributed.**

-   H1= The distribution of childcare services at Tampines are **not randomly distributed.**

-   The null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.

The code chunk below is used to perform the hypothesis testing.

```{r}
F_tm.csr <- envelope(childcare_tm_ppp, Fest, correction = "all", nsim = 999)
```

```{r}
plot(F_tm.csr)
```

# **3.12 Analysing Spatial Point Process Using K-Function**

K-function measures the number of events found up to a given distance of any particular event. In this section, you will learn how to compute K-function estimates by using [*`Kest()`*](https://rdrr.io/cran/spatstat/man/Kest.html) of **spatstat** package. You will also learn how to perform monta carlo simulation test using *`envelope()`* of spatstat package.

## **3.12.1 Choa Chu Kang Planning Area**

## 3.12.1.1 Computing K-function Estimate

```{r}
K_ck = Kest(childcare_ck_ppp, correction = "Ripley") 
```

```{r}
plot(K_ck, . -r ~ r, ylab= "K(d)-r", xlab = "d(m)")
```

## 3.12.1.2 Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

-   Ho = The distribution of childcare services at Choa Chu Kang are **randomly distributed.**

-   H1= The distribution of childcare services at Choa Chu Kang are **not randomly distributed.**

-   The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

The code chunk below is used to perform the hypothesis testing.

```{r}
K_ck.csr <- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(K_ck.csr, . - r ~ r, xlab="d", ylab="K(d)-r")
```

## **3.12.2 Tampines Planning Area**

## 3.12.2.1 Computing K-function Estimation

```{r}
K_tm = Kest(childcare_tm_ppp, correction = "Ripley") 
```

```{r}
plot(K_tm, . -r ~ r, ylab= "K(d)-r", xlab = "d(m)", xlim=c(0,1000))
```

## 3.12.2.2 Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

-   Ho = The distribution of childcare services at Tampines are **randomly distributed.**

-   H1= The distribution of childcare services at Tampines are **not randomly distributed.**

-   The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

The code chunk below is used to perform the hypothesis testing.

```{r}
K_tm.csr <- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(K_tm.csr, . - r ~ r, xlab="d", ylab="K(d)-r", xlim=c(0,500))
```

# **3.13 Analysing Spatial Point Process Using L-Function**

In this section, you will learn how to compute L-function estimation by using [*`Lest()`*](https://rdrr.io/cran/spatstat/man/Lest.html) of **spatstat** package. You will also learn how to perform monta carlo simulation test using *`envelope()`* of spatstat package.

## **3.13.1 Choa Chu Kang Planning area**

## 3.13.1.1 Computing L Function Estimation

```{r}
L_ck = Lest(childcare_ck_ppp, correction = "Ripley") 
```

```{r}
plot(L_ck, . -r ~ r, ylab= "L(d)-r", xlab = "d(m)")
```

## 3.13.1.2 Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

-   Ho = The distribution of childcare services at Choa Chu Kang are **randomly distributed.**

-   H1= The distribution of childcare services at Choa Chu Kang are **not randomly distributed.**

-   The null hypothesis will be rejected if p-value if smaller than alpha value of 0.001.

The code chunk below is used to perform the hypothesis testing.

```{r}
L_ck.csr <- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(L_ck.csr, . - r ~ r, xlab="d", ylab="L(d)-r")
```

## **3.13.2 Tampines Planning Area**

## 3.13.2.1 Computing L-function Estimation

```{r}
L_tm = Lest(childcare_tm_ppp, correction = "Ripley") 
```

```{r}
plot(L_tm, . -r ~ r, ylab= "L(d)-r", xlab = "d(m)", xlim=c(0,1000))
```

## 3.13.2.2 Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

-   Ho = The distribution of childcare services at Tampines are **randomly distributed.**

-   H1= The distribution of childcare services at Tampines are **not** **randomly distributed.**

-   The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

The code chunk below will be used to perform the hypothesis testing.

```{r}
L_tm.csr <- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
```

Then, plot the model output by using the code below.

```{r}
plot(L_tm.csr, . - r ~ r, xlab="d", ylab="L(d)-r", xlim=c(0,500))
```
