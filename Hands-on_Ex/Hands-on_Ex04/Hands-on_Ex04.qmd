---
title: "Hands-on Exercise 4: Spatial Weights and Applications"
execute: 
  warning: false
date: "`r format(Sys.Date(), '%Y-%m-%d')`"
---

## 4.1 Overview

In this hands-on exercise, we will learn how to compute spatial weights using R. By the end to this hands-on exercise, we will be able to:

-   import geospatial data using appropriate function(s) of `sf` package
-   import `csv` file using appropriate function of readr package
-   perform relational join using appropriate join function of `dplyr` package
-   compute spatial weights using appropriate functions of `spdep` package
-   calculate spatially lagged variables using appropriate functions of `spdep` package

## 4.2 The Study Area and Data

Two data sets will be used in this hands-on exercise, they are:

-   `Hunan county boundary layer`
-   `Hunan_2012.csv`

### 4.2.1 Getting Started

Before we get started, we need to ensure that `spdep`, `sf`, `tmap` and `tidyverse` packages of R are currently installed in your R.

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse, knitr)
```

## 4.3 Getting the Data Into R Environment

### 4.3.1 Import Shapefile into R Environment

```{r}
hunan <- st_read(dsn = "data/geospatial", layer = "Hunan")
```

### 4.3.2 Import `csv` File into R Environment

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")

```

### 4.3.3 Performing Relational Join

The code chunk below will be used to update the attribute table of **hunan’s SpatialPolygonsDataFrame** with the attribute fields of **hunan2012** dataframe. This is performed by using `left_join()` of `dplyr` package.

```{r}
hunan <- left_join(hunan,hunan2012)%>%
  select(1:4, 7, 15)
```

## 4.4 Visualising Regional Development Indicator

Now, we are going to prepare a basemap and a choropleth map showing the distribution of **GDPPC 2012** by using `qtm()` of `tmap` package.

```{r}
basemap <- tm_shape(hunan) + tm_polygons() + tm_text("NAME_3", size=0.5)
```

```{r}
gdppc <- qtm(hunan, "GDPPC")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

## 4.5 Computing Contiguity Spatial Weights

In this section, we will use `poly2nb()` of `spdep` package to compute contiguity weight matrices for the study area. This function builds a **neighbours list** based on regions with contiguous boundaries.

### 4.5.1 Computing (QUEEN) Contiguity Based Neighbours

The code chunk below is used to compute **Queen** contiguity weight matrix.

```{r}
wm_q <- poly2nb(hunan, queen=TRUE) 
summary(wm_q)
```

For each polygon in our polygon object, `wm_q` lists all neighboring polygons.

To see the neighbors for the first polygon in the object:

```{r}
wm_q[[1]]
```

Polygon 1 has 5 neighbors.

We can retrive the county name of **Polygon ID=1** by using the code chunk below:

```{r}
hunan$County[1]
```

To reveal the county names of the five neighboring polygons:

```{r}
hunan$NAME_3[c(2,3,4,57,85)]
```

We can retrieve the **GDPPC** of these five countries by using the code chunk below.

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

We can display the complete weight matrix by using `str()`.

```{r}
str(wm_q)
```

### 4.5.2 Creating (ROOK) Contiguity Based Neighbours

The code chunk below is used to compute **Rook** contiguity weight matrix.

```{r}
wm_r <- poly2nb(hunan, queen=FALSE)
summary(wm_r)
```

The summary report above shows that there are 88 area units in Hunan. The most connect area unit has 10 neighbours. There are two area units with only one neighbour.

### 4.5.3 Visualising Contiguity Weights

The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of **us.bound**. Our function will be `st_centroid`. We will be using `map_dbl` variation of map from the purrr package.

To get our longitude values we map the `st_centroid` function over the geometry column of **us.bound** and access the longitude value through double bracket notation \[\[\]\] and 1.

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

We do the same for latitude with one key difference. We access the second value per each centroid with \[\[2\]\].

```{r}
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

Now that we have latitude and longitude, we use `cbind` to put longitude and latitude into the same object.

```{r}
coords <- cbind(longitude, latitude)
```

We check the first few observations to see if things are formated correctly.

```{r}
head(coords)
```

### 4.5.3.1 Plotting Queen Contiguity Based Neighbours Map

```{r}
 plot(hunan$geometry, border="lightgrey")
 plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")

```

### 4.5.3.2 Plotting Rook Contiguity Based Neighbours Map

```{r}
 plot(hunan$geometry, border="lightgrey")
 plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

### 4.5.3.3 Plotting both Queen and Rook Contiguity Based Neighbours Maps

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey", main="Queen Contiguity")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
plot(hunan$geometry, border="lightgrey", main="Rook Contiguity")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

## 4.6 Computing Distance Based Neighbours

Here we will derive distance-based weight matrices by using `dnearneigh()` of `spdep` package.

The function identifies neighbours of region points by **Euclidean distance** with a distance band with lower d1= and upper d2= bounds controlled by the bounds= argument.

### 4.6.1 Determine the Cut-off Distance

Firstly, we need to determine the upper limit for distance band by using the steps below:

-   Return a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using `knearneigh()` of `spdep`

-   Convert the knn object returned by `knearneigh()` into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using `knn2nb()`

-   Return the length of neighbour relationship edges by using `nbdists()` of `spdep`. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise

-   Remove the list structure of the returned object by using `unlist()`

```{r}
#coords <- coordinates(hunan)
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

The summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have **at least one neighbour**.

### 4.6.2 Computing Fixed Distance Weight Matrix

Now, we will compute the distance weight matrix by using `dnearneigh()` as shown in the code chunk below.

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

::: callout-note
**Quiz: What is the meaning of “Average number of links: 3.681818” shown above?**

Ans: On average, each region has about 3 to 4 neighboring regions within a distance of 62 km.
:::

Next, we will use `str()` to display the content of `wm_d62` weight matrix.

```{r}
str(wm_d62)
```

Another way to display the structure of the weight matrix is to combine `table()` and `card()` of `spdep.`

```{r}
table(hunan$County, card(wm_d62))
```

```{r}
 n_comp <- n.comp.nb(wm_d62)
 n_comp$nc
```

```{r}
table(n_comp$comp.id)
```

### 4.6.2.1 Plotting Fixed Distance Weight Matrix

Next, we will plot the distance weight matrix by using the code chunk below.

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE)
plot(k1, coords, add=TRUE, col="red", length=0.08)
```

The red lines show the links of **1st nearest neighbours** and the black lines show the **links of neighbours within the cut-off distance of 62km**.

We can also plot both of them next to each other by using the code chunk below.

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey", main="1st nearest neighbours")
plot(k1, coords, add=TRUE, col="red", length=0.08)
plot(hunan$geometry, border="lightgrey", main="Distance link")
plot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)
```

### 4.6.3 Computing Adaptive Distance Weight Matrix

It is possible to control the numbers of neighbours directly using k-nearest neighbours, either **accepting asymmetric neighbours or imposing symmetry** as shown in the code chunk below.

```{r}
knn6 <- knn2nb(knearneigh(coords, k=6))
knn6
```

Similarly, we can display the content of the matrix by using `str()`.

```{r}
str(knn6)
```

### 4.6.3.1 Plotting Distance Based Neighbours

We can plot the weight matrix using the code chunk below

```{r}
plot(hunan$geometry, border="lightgrey")
plot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

## 4.7 Weights Based on IDW

In this section, we will derive a spatial weight matrix based on **Inversed Distance method.**

First, we will compute the distances between areas by using `nbdists()` of `spdep`.

```{r}
dist <- nbdists(wm_q, coords, longlat = TRUE)
ids <- lapply(dist, function(x) 1/(x))
ids
```

### 4.7.1 Row-standardised Weights Matrix

Next, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned e**qual weight (style=“W”)**. This is accomplished by assigning the **fraction 1/(#ofneighbors)** to each neighboring county then summing the weighted income values.

```{r}
rswm_q <- nb2listw(wm_q, style="W", zero.policy = TRUE)
rswm_q
```

To see the weight of the first polygon’s eight neighbors type:

```{r}
rswm_q$weights[10]
```

Each neighbor is assigned a 0.125 of the total weight. This means that when R computes the average neighboring income values, each neighbor’s income will be multiplied by 0.125 before being tallied.

Using the same method, we can also derive a row standardised distance weight matrix by using the code chunk below.

```{r}
rswm_ids <- nb2listw(wm_q, glist=ids, style="B", zero.policy=TRUE)
rswm_ids
```

```{r}
 rswm_ids$weights[1]
```

```{r}
summary(unlist(rswm_ids$weights))
```

## 4.8 Application of Spatial Weight Matrix

In this section, we will create four different spatial lagged variables, they are:

-   spatial lag with row-standardized weights

-   spatial lag as a sum of neighbouring values

-   spatial window average

-   spatial window sum

### 4.8.1 Spatial Lag with Row-standardized Weights

We will compute the **average neighbor GDPPC** value for each polygon.

```{r}
GDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)
GDPPC.lag
```

In the previous section, we retrieved the **GDPPC** of these five countries by using the code chunk below.

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

We can append the spatially lag **GDPPC** values onto `hunan` sf data frame by using the code chunk below.

```{r}
lag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("NAME_3", "lag GDPPC")
hunan <- left_join(hunan,lag.res)
```

The following table shows the average neighboring income values (stored in the **Inc.lag** object) for each county.

```{r}
head(hunan)
```

Next, we will plot both the **GDPPC** and s**patial lag GDPPC** for comparison using the code chunk below.

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_gdppc <- qtm(hunan, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)
```

### 4.8.2 Spatial Lag as a Sum of Neighboring Values

We can calculate spatial lag as a sum of neighboring values by assigning binary weights. We start by applying a function that will assign a value of 1 per each neighbor. This is done with `lapply`, which we have been using to manipulate the neighbors structure throughout the past notebooks.

```{r}
b_weights <- lapply(wm_q, function(x) 0*x + 1)
b_weights2 <- nb2listw(wm_q, glist = b_weights, style = "B")
b_weights2
```

With the proper weights assigned, we can use `lag.listw` to compute a lag variable from our weight and **GDPPC**.

```{r}
lag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
lag.res <- as.data.frame(lag_sum)
colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")
```

First, let us examine the result by using the code chunk below.

```{r}
lag_sum
```

Next, we will append the `lag_sum GDPPC` field into `hunan` sf data frame by using the code chunk below.

```{r}
hunan <- left_join(hunan, lag.res)
```

Now, We can plot both the **GDPPC** and **Spatial Lag Sum GDPPC** for comparison using the code chunk below.

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_sum_gdppc <- qtm(hunan, "lag_sum GDPPC")
tmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)
```

### 4.8.3 Spatial Window Average

The spatial window average uses row-standardized weights and includes the diagonal element. To do this in R, we need to go back to the neighbors structure and add the diagonal element before assigning weights.

To add the diagonal element to the neighbour list, we just need to use `include.self()` from `spdep`.

```{r}
wm_qs <- include.self(wm_q)
```

Look at the neighbour list of **area \[1\]** by using the code chunk below.

```{r}
wm_qs[[1]]
```

Notice that now \[1\] has six neighbours instead of five.

Now we obtain weights with `nb2listw()`

```{r}
wm_qs <- nb2listw(wm_qs)
wm_qs
```

Again, we use `nb2listw()` and `glist()` to explicitly assign weight values.

Lastly, we just need to create the lag variable from our weight structure and **GDPPC** variable.

```{r}
lag_w_avg_gpdpc <- lag.listw(wm_qs, hunan$GDPPC)
lag_w_avg_gpdpc
```

Next, we will convert the lag variable listw object into a data.frame by using `as.data.frame()`.

```{r}
lag.list.wm_qs <- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))
lag_wm_qs.res <- as.data.frame(lag.list.wm_qs)
colnames(lag_wm_qs.res) <- c("NAME_3", "lag_window_avg GDPPC")
```

Note: The third command line on the code chunk above renames the field names of `lag_wm_q1.res` object into **NAME_3** and **lag_window_avg GDPPC** respectively.

Next, the code chunk below will be used to append **lag_window_avg GDPPC** values onto `hunan` sf data.frame by using `left_join()` of dplyr package.

```{r}
hunan <- left_join(hunan, lag_wm_qs.res)
```

To compare the values of lag **GDPPC** and **Spatial window average**, `kable()` of Knitr package is used to prepare a table using the code chunk below.

```{r}
hunan %>%
  select("County", "lag GDPPC", "lag_window_avg GDPPC") %>% 
  kable()
```

Lastly, `qtm()` of `tmap` package is used to plot the **lag_gdppc** and **w_ave_gdppc** maps next to each other for quick comparison.

```{r}
w_avg_gdppc <- qtm(hunan, "lag_window_avg GDPPC")
tmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)
```

### 4.8.4 Spatial Window Sum

The spatial window sum is the counter part of the window average, but without using row-standardized weights.

To add the diagonal element to the neighbour list, we just need to use `include.self()` from spdep.

```{r}
wm_qs <- include.self(wm_q)
wm_qs
```

Next, we will assign binary weights to the neighbour structure that includes the diagonal element.

```{r}
b_weights <- lapply(wm_qs, function(x) 0*x + 1)
b_weights[1]
```

Notice that now \[1\] has six neighbours instead of five.

Again, we use `nb2listw()` and `glist()` to explicitly assign weight values.

```{r}
b_weights2 <- nb2listw(wm_qs, glist = b_weights, style = "B")
b_weights2
```

With our new weight structure, we can compute the lag variable with `lag.listw()`.

```{r}
w_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
w_sum_gdppc
```

Next, we will convert the lag variable list object into a data.frame by using `as.data.frame()`.

```{r}
w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDPPC")
```

Next, the code chunk below will be used to append w_sum GDPPC values onto hunan sf data.frame by using `left_join()` of dplyr package.

```{r}
hunan <- left_join(hunan, w_sum_gdppc.res)

```

To compare the values of lag **GDPPC** and **Spatial window average**, `kable()` of Knitr package is used to prepare a table using the code chunk below.

```{r}
hunan %>%
  select("County", "lag_sum GDPPC", "w_sum GDPPC") %>%
  kable()
```

Lastly, `qtm()` of `tmap` package is used to plot the **lag_sum GDPPC** and **w_sum_gdppc** maps next to each other for quick comparison.

```{r}
w_sum_gdppc <- qtm(hunan, "w_sum GDPPC")
tmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)
```
