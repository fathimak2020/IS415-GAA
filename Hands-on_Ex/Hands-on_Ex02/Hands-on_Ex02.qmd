---
title: "Hands-on Exercise 2: Choropleth Mapping with R"
execute: 
  warning: false
  freeze: true
  eval: false
date: "`r format(Sys.Date(), '%Y-%m-%d')`"
---

# 2.1 Getting Started

In this exercise, I will:

-   plot choropleth maps using the `tmap` package

## 2.1.1 Datasets

-   **Geospatial:** [Master Plan 2014 Subzone Boundary (Web)](https://beta.data.gov.sg/datasets/d_5cb80a95445f236737f6bc2bfe5f159d/view)

-   **Aspatial:** [Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020](https://www.singstat.gov.sg/find-data/search-by-theme/population/geographic-distribution/latest-data)

## 2.1.2 R Packages

The following packages will be used in this exercise:

-   [**readr**](https://readr.tidyverse.org/) for importing delimited text file

-   [**tidyr**](https://tidyr.tidyverse.org/) for tidying data

-   [**dplyr**](https://dplyr.tidyverse.org/) for wrangling data

-   [**sf**](https://cran.r-project.org/web/packages/sf/) for handling geospatial data

-   [**tmap**](https://cran.r-project.org/web/packages/tmap/) for plotting choropleth maps

```{r}
pacman::p_load(sf, tmap, tidyverse)
```

# 2.2 Importing Data into R

## 2.2.1 Importing Geospatial Data into R

Use the `st_read()` function of **sf** package to import `MP14_SUBZONE_WEB_PL` shapefile into R as a simple feature data frame called `mpsz`

```{r}
mpsz <- st_read(dsn="data/geospatial",
                layer="MP14_SUBZONE_WEB_PL")
```

```{r}
mpsz
```

## 2.2.2 Importing **Attribute** Data into R

Using `read_csv()` function of **readr** package, we will read the DOS csv file.

```{r}
popdata <- read_csv("data/aspatial/respopagesextod2011to2020.csv")
```

## 2.2.3 Preparing Data

A data table containing values for the year 2020 is needed for creating the thematic map. This table should include variables such as PA (Planning Area), SZ (Subzone), and AG (Age Group), which consists of ECONOMY ACTIVE, AGED, TOTAL, and DEPENDENCY categories.

-   **YOUNG**: age group 0 to 4 until age group 20 to 24

-   **ECONOMY ACTIVE**: age group 25-29 until age group 60-64

-   **AGED**: age group 65 and above

-   **TOTAL**: all age group

-   **DEPENDENCY**: the ratio between young and aged against economy active group

## 2.2.3.1 Wrangling Data

To wrangle the data, the following functions will be used:

`pivot_wider()` of tidyr package, and `mutate()`, `filter()`, `group_by()` and `select()` of dplyr package

```{r}
# Filter data for the year 2020 and group by Planning Area (PA), Subzone (SZ), and Age Group (AG)
popdata2020 <- popdata %>%
  filter(`Time` == 2020) %>%
  group_by(PA, SZ, AG) %>% 
  
  # Create a new data frame with total population for each group
  summarise(`POP` = sum(`Pop`)) %>%
  
  # Ungroup after grouping to create summaries for each grouping
  ungroup() %>%
  
  # Pivot the data to increase the number of columns and decrease the number of rows
  pivot_wider(names_from = AG, values_from = POP) %>%
  
  # Add new variables and preserve existing ones
  mutate(
    YOUNG = rowSums(.[3:6]) + rowSums(.[12]),
    `ECONOMY ACTIVE` = rowSums(.[7:11]) + rowSums(.[13:15]),
    `AGED` = rowSums(.[16:21]),
    `TOTAL` = rowSums(.[3:21]),
    `DEPENDENCY` = (`YOUNG` + `AGED`) / `ECONOMY ACTIVE`
  ) %>%
  
  # Select specific columns for the final data frame
  select(`PA`, `SZ`, `YOUNG`, `ECONOMY ACTIVE`, `AGED`, `TOTAL`, `DEPENDENCY`)

# View the resulting data frame
popdata2020

```

## 2.2.3.2 Joining the Attribute Data and Geospatial Data

It is necessary to convert the PA and SZ fields to uppercase. This is because these fields contain a mix of upper- and lowercase values, unlike the SUBZONE_N and PLN_AREA_N fields, which consistently use uppercase characters.

```{r}
popdata2020 <- popdata2020 %>%
                mutate_at(.vars = vars(PA, SZ),
                          .funs = funs(toupper)) %>%
                filter(`ECONOMY ACTIVE` > 0)
popdata2020
```

`left_join()` of dplyr is used to join the attribute data and geospatial data using planning subzone name.

```{r}
mpsz_pop2020 <- left_join(mpsz, popdata2020,
                          by = c("SUBZONE_N" = "SZ"))
mpsz_pop2020
```

```{r}
write_rds(mpsz_pop2020, "data/rds/mpszpop2020.rds")
```

# 2.3 Choropleth Mapping Geospatial Data Using tmap

Two methods can be employed to create a thematic map using tmap:

1.  Quickly generating a thematic map by utilising `qtm()`.
2.  Plotting a highly customisable thematic map through the use of tmap elements.

## 2.3.1 Plotting a choropleth map with `qtm()`

```{r}
tmap_mode("plot") 
qtm(mpsz_pop2020,
    fill = "DEPENDENCY")
```

## 2.3.2 Plotting a choropleth map with tmap’s elements

One disadvantge of `qtm()` is that it makes aesthetics of individual layers harder to control.

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "Blues",
          title = "Dependency ratio") +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45,
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) + 
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha = 0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS",
             position = c("left", "bottom"))
```

## 2.3.2.1 Plotting a base map

The core of tmap is built using `tm_shape()`, and additional layer elements like `tm_fill()` and `tm_polygons()` are used. In the given code snippet, `tm_shape()` defines the input data (`mpsz_pop2020`), and `tm_polygons()` is used to draw the planning subzone polygons.

```{r}
tm_shape(mpsz_pop2020) +
  tm_polygons()
```

## 2.3.2.2 Drawing a choropleth map using `tm_polygons()`

To make a choropleth map displaying the variable distribution across planning subzones, assign the target variable (e.g., Dependency) to tm_polygons().

```{r}
tm_shape(mpsz_pop2020) +
  tm_polygons("DEPENDENCY")
```

## 2.3.2.3 Drawing a choropleth map using `tm_fill()` and `tm_border()`

`tm_polygons()` wraps `tm_fill()` for shading polygons and `tm_borders()` for adding shapefile borders to the choropleth map.

```{r}
tm_shape(mpsz_pop2020) +
  tm_polygons("DEPENDENCY")
```

To add the boundary of the planning subzones, `tm_borders()` is used.

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY") +
  tm_borders(lwd = 0.1, alpha = 1)
```

In addition to the alpha argument, `tm_borders()` has three other options:

-   *col* = border colour,

-   *lwd* = border line width. The default is 1, and

-   *lty* = border line type. The default is “solid”.

## 2.3.3 Data classification methods of tmap

Choropleth maps often use data classification methods to group numerous observations into ranges or classes.

tmap offers ten classification methods: pretty (default), equal, jenks, fixed, sd, quantile, kmeans, hclust, bclust, and fisher.

To specify a data classification method, use the style argument in `tm_fill()` or `tm_polygons()`.

## 2.4.3.1 Plotting choropleth maps with built-in classification methods

The following shows quantile data classification.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "jenks") +
  tm_borders(alpha = 0.5)
```

The following shows an equal data classification method.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5)
```

The following shows fixed data classification method.

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY",
          n = 5,
          style = "fixed",
          breaks = c(0, 2, 6, 13, 19)) + 
  tm_borders(alpha = 0.5)
```

The following shows standard deviation method.

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY",
          n = 5,
          style = "sd") +
  tm_borders(alpha = 0.5)
```

The following shows quantile method.

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5)
```

The following shows KMeans method.

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY",
          n = 5,
          style = "kmeans") +
  tm_borders(alpha = 0.5)
```

The following shows hclust method.

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY",
          n = 5,
          style = "hclust") +
  tm_borders(alpha = 0.5)
```

The following shows bclust method.

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY",
          n = 5,
          style = "bclust") +
  tm_borders(alpha = 0.5)
```

The following shows fisher method.

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY",
          n = 5,
          style = "fisher") +
  tm_borders(alpha = 0.5)
```

## 2.4.3.2 Experimenting with Different Number of Classes

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY",
          n = 20,
          style = "pretty") +
  tm_borders(alpha = 0.5)
```

## 2.4.3.3 Plotting choropleth map with custom break

To customize category breaks in tmap, use the breaks argument in `tm_fill()`. Specify n+1 elements in breaks for n categories (values in increasing order).

The provided code calculates and displays descriptive statistics for the DEPENDENCY field.

```{r}
summary(mpsz_pop2020$DEPENDENCY)
```

Now, we will plot the choropleth map by using the values we obtained from the previous output.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +
  tm_borders(alpha = 0.5)
```

## 2.4.4 Colour Scheme

tmap supports colour ramps either defined by the user or a set of predefined colour ramps from the RColorBrewer package.

## 2.4.4.1 Using ColourBrewer palette

The chosen colour will be assigned to the palette argument of `tm_fill()`.

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY",
          n = 6,
          style = "quantile",
          palette = "Blues") +
  tm_borders(alpha = 0.5)
```

To reverse the colour shading, add a “-” prefix.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "-Greens") +
  tm_borders(alpha = 0.5)
```

## 2.4.5 Map Layouts

## 2.4.5.1 Map Legend

tmap offers various legend options that allow you to modify the placement, format, and appearance of the legend.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "jenks", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone \n(Jenks classification)",
            main.title.position = "center",
            main.title.size = 1,
            legend.height = 0.45, 
            legend.width = 0.35,
            legend.outside = FALSE,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```

## 2.4.5.2 Map style

tmap enables the alteration of numerous layout settings, accessible through `tmap_style()`.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "-Greens") +
  tm_borders(alpha = 0.5) +
  tmap_style("classic")
```

## 2.4.5.3 Cartographic Furniture

tmap also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "No. of persons") +
  tm_layout(main.title = "Distribution of Dependency Ratio \nby planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar(width = 0.15) +
  tm_grid(lwd = 0.1, alpha = 0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

## 2.4.6 Drawing Small Multiple Choropleth Maps

Facet maps consist of multiple maps arranged either side-by-side or stacked vertically. They are useful for visualising changes in spatial relationships concerning another variable, like time.

In tmap, facet maps can be created in three ways:

1.  By assigning multiple values to at least one aesthetic argument
2.  By defining a group-by variable in tm_facets()
3.  By creating multiple stand-alone maps with tmap_arrange()

## 2.4.6.1 By assigning multiple values to at least one aesthetic argument

Facet maps are created by defining ncols in `tm_fill()`.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill(c("YOUNG", "AGED"),
          style = "equal", 
          palette = "Blues") +
  tm_layout(legend.position = c("right", "bottom")) +
  tm_borders(alpha = 0.5) +
  tmap_style("white")
```

In this example, small multiple choropleth maps are created by assigning multiple values to at least one of aesthetic arguments

```{r}
tm_shape(mpsz_pop2020)+ 
  tm_polygons(c("DEPENDENCY","AGED"),
          style = c("equal", "quantile"), 
          palette = list("Blues","Greens")) +
  tm_layout(legend.position = c("right", "bottom"))
```

## 2.4.6.2 By defining a group-by variable in `tm_facets()`

Facet maps are created using `tm_facets()`.

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "Blues",
          thres.poly = 0) + 
  tm_facets(by="REGION_N", 
            free.coords=TRUE, 
            drop.shapes=TRUE) +
  tm_layout(legend.show = FALSE,
            title.position = c("center", "center"), 
            title.size = 20) +
  tm_borders(alpha = 0.5)
```

## 2.4.6.3 By creating multiple stand-alone maps with `tmap_arrange()`

Facet maps are created by creating multiple stand-alone maps with `tmap_arrange()`

```{r}
youngmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("YOUNG", 
              style = "quantile", 
              palette = "Blues")

agedmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("AGED", 
              style = "quantile", 
              palette = "Blues")

tmap_arrange(youngmap, agedmap, asp=1, ncol=2)
```

## 2.4.7 Mapping Spatial Object Meeting a Selection Criterion

We can also use selection funtion to map spatial objects meeting the selection criterion.

```{r}
tm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N=="CENTRAL REGION", ])+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(legend.outside = TRUE,
            legend.height = 0.45, 
            legend.width = 5.0,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```
