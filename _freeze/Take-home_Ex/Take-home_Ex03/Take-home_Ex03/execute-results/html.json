{
  "hash": "87bc3328c48c41a59290efeaef78f629",
  "result": {
    "markdown": "---\ntitle: \"Take Home Exercise 3\"\nformat:\n  html:\n    toc: true\nexecute: \n  warning: false\n  eval: false\n  freeze: true\n  fig-retine: 3\ndate: \"2024-03-12\"\ndate-modified: \"last-modified\"\n---\n\n\n# **Analysing Push-Pull Factors for Public Bus Demand in Singapore Using Spatial Econometric Interaction Modelling**\n\nThis project investigates the determinants of public bus demand in Singapore through the application of Spatial Econometric Interaction Modeling. The findings offer valuable insights for urban planners, policymakers, and researchers aiming to optimise mixed-use developments and promote sustainable urban living through a deeper understanding of public bus demand factors.\n\n# **My Responsibilities**\n\n-   Data Preparation for my groupmates to build a Spatial Interaction Model\n\n-   Places of Interest Visualisation\n\n-   Bus Stops in Singapore Visualisation\n\n-   Choropleth Mapping of Population\n\n-   Passenger Volume Trend Analysis\n\n-   Most and Least Popular Stations\n\n-   Bus Stop Centrality\n\n-   Spatial Heatmaps\n\n-   Correlation Matrix\n\n-   Network Analysis\n\n-   Emerging Hot Spot Analysis\n\n## **Data import and preparation**\n\n### **Import R packages**\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, sfdep, tidyverse, tmap, spdep, knitr, leaflet, ggthemes, knitr, plotly,sf, sfdep, tidyverse, tmap, spdep, knitr)\n```\n:::\n\n\n### **Import data**\n\nIn our analysis we need these data\n\n-   Subzone planning area and its coordinates (source: [data.gov.sg](https://rstudio-pubs-static.s3.amazonaws.com/data.gov.sg))\n\n-   Bus stop location (source: [LTA DataMall](https://www.mytransport.sg/content/mytransport/home/dataMall.html))\n\n#### **Aspatial data**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbus_nov <- read_csv(\"data/origin_destination_bus_202311.csv\")\nbus_dec <- read_csv(\"data/origin_destination_bus_202312.csv\")\nbus_jan <- read_csv(\"data/origin_destination_bus_202401.csv\")\nhdb <- read_csv(\"data/hdb.csv\")\npopulation <- read_csv(\"data/respopagesextod2011to2020.csv\")\n```\n:::\n\n\n#### **Geospatial data**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_sf <- st_read(dsn = \"data/geospatial\", layer = \"MPSZ-2019\") %>%\n  st_transform(crs = 3414)\n\nbus_coords <- read_csv(\"data/bus_stop.csv\")\n\nbusiness <- st_read(dsn = \"data/geospatial\", \n                   layer = \"Business\")\n  \nfininst <- st_read(dsn = \"data/geospatial\", \n                   layer = \"FinServ\")\n\nentertainment <- st_read(dsn = \"data/geospatial\", \n                   layer = \"entertn\")\n\nf_and_b <- st_read(dsn = \"data/geospatial\", \n                   layer = \"F&B\")\n\nleisure <- st_read(dsn = \"data/geospatial\", \n                   layer = \"Liesure&Recreation\")\n\nretail <- st_read(dsn = \"data/geospatial\", \n                   layer = \"Retails\") \n\nresidential <- read_csv('data/hdb.csv')\n```\n:::\n\n\n## \\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\n\n## 1.0 Data Preparation for SIM\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbus_coords_sf <- st_as_sf(bus_coords, coords = c(\"Longitude\", \"Latitude\"), crs = 4326)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbus_coords_sf <- st_transform(bus_coords_sf, st_crs(mpsz_sf))\n```\n:::\n\n\n### **Plotting Bus Stop Locations**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsg_bus_stops <- st_intersection(bus_coords_sf, mpsz_sf)\n\ntmap_mode(\"plot\")\n\ntmap_options(check.and.fix = TRUE, max.categories = 55)\n\nmpsz_plot <- tm_shape(mpsz_sf) +\n  tm_borders(lwd = 2, group = \"mpsz_borders\") +  \n  tm_layout(legend.show = FALSE)  \n\ncombined_plot <- mpsz_plot +\n  tm_shape(mpsz_sf) +\n  tm_polygons(col = \"PLN_AREA_N\", title = \"Plan Area\", group = \"mpsz_polygons\") +\n  tm_shape(sg_bus_stops) +\n  tm_dots(col = \"blue\", size = 0.1, group = \"bus_coords\") +\n  tm_layout(legend.show = FALSE)  \n\ncombined_plot\n```\n:::\n\n\n### **Extracting Singapore Bus Stop Locations**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbus_stop_subzone <- st_intersection(sg_bus_stops, mpsz_sf)\nsg_bus_stops$Subzone <- bus_stop_subzone$PLN_AREA_N\n```\n:::\n\n\n### **Adding Subzone Information to Singapore Bus Stop Locations**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmerged_data <- merge(bus_coords, sg_bus_stops, by = \"BusStopCode\", all.x = TRUE)\nbus_coords$Subzone <- merged_data$PLN_AREA_N\nbus_coords <- bus_coords[, c(\"BusStopCode\", \"RoadName\", \"Description\", \"Subzone\", \"Latitude\", \"Longitude\")]\nbus_coords_subzone <- bus_coords\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#write_rds(bus_coords_subzone, \"data/rds/bus_coords_subzone.rds\")\n```\n:::\n\n\n## Adding Bus Stop Description, Coordinates and Subzone Information for November 2023\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmerged_bus_nov <- left_join(bus_nov, bus_coords, by = c(\"ORIGIN_PT_CODE\" = \"BusStopCode\")) %>%\n  rename(ORIGIN_SUBZONE = Subzone, ORIGIN_DESCRIPTION = Description, ORIGIN_LAT = Latitude, ORIGIN_LONG = Longitude) %>%\n  left_join(bus_coords, by = c(\"DESTINATION_PT_CODE\" = \"BusStopCode\")) %>%\n  rename(DESTINATION_SUBZONE = Subzone, DESTINATION_DESCRIPTION = Description, DESTINATION_LAT = Latitude, DESTINATION_LONG = Longitude) %>%\n  select(YEAR_MONTH, DAY_TYPE, TIME_PER_HOUR, PT_TYPE, \n         ORIGIN_PT_CODE, ORIGIN_SUBZONE, ORIGIN_DESCRIPTION, ORIGIN_LAT, ORIGIN_LONG,\n         DESTINATION_PT_CODE, DESTINATION_SUBZONE, DESTINATION_DESCRIPTION, DESTINATION_LAT, DESTINATION_LONG,\n         TOTAL_TRIPS)\n```\n:::\n\n\n## Looking for NA values\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmissing_stops <- merged_bus_nov %>%\n  summarise(ORIGIN_NA = any(is.na(ORIGIN_DESCRIPTION)),\n            DESTINATION_NA = any(is.na(DESTINATION_DESCRIPTION)),\n            ORIGIN_PT_WITH_NA = ifelse(any(is.na(ORIGIN_DESCRIPTION)), unique(ORIGIN_PT_CODE[is.na(ORIGIN_DESCRIPTION)]), NA),\n            DESTINATION_PT_WITH_NA = ifelse(any(is.na(DESTINATION_DESCRIPTION)), unique(DESTINATION_PT_CODE[is.na(DESTINATION_DESCRIPTION)]), NA))\n\nprint(missing_stops)\n```\n:::\n\n\n**Note: Bus stop 65139 is no longer in operation**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmerged_bus_nov <- merged_bus_nov %>%\n  filter(!is.na(ORIGIN_DESCRIPTION) & !is.na(DESTINATION_DESCRIPTION))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#write_rds(merged_bus_nov, \"data/rds/merged_bus_nov.rds\")\n```\n:::\n\n\n## Adding Bus Stop Description, Coordinates and Subzone Information for December 2023\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmerged_bus_dec <- left_join(bus_dec, bus_coords, by = c(\"ORIGIN_PT_CODE\" = \"BusStopCode\")) %>%\n  rename(ORIGIN_SUBZONE = Subzone, ORIGIN_DESCRIPTION = Description, ORIGIN_LAT = Latitude, ORIGIN_LONG = Longitude) %>%\n  left_join(bus_coords, by = c(\"DESTINATION_PT_CODE\" = \"BusStopCode\")) %>%\n  rename(DESTINATION_SUBZONE = Subzone, DESTINATION_DESCRIPTION = Description, DESTINATION_LAT = Latitude, DESTINATION_LONG = Longitude) %>%\n  select(YEAR_MONTH, DAY_TYPE, TIME_PER_HOUR, PT_TYPE, \n         ORIGIN_PT_CODE, ORIGIN_SUBZONE, ORIGIN_DESCRIPTION, ORIGIN_LAT, ORIGIN_LONG,\n         DESTINATION_PT_CODE, DESTINATION_SUBZONE, DESTINATION_DESCRIPTION, DESTINATION_LAT, DESTINATION_LONG,\n         TOTAL_TRIPS)\n```\n:::\n\n\n## Looking for NA values\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmissing_stops_dec <- merged_bus_dec %>%\n  summarise(ORIGIN_NA = any(is.na(ORIGIN_DESCRIPTION)),\n            DESTINATION_NA = any(is.na(DESTINATION_DESCRIPTION)),\n            ORIGIN_PT_WITH_NA = ifelse(any(is.na(ORIGIN_DESCRIPTION)), unique(ORIGIN_PT_CODE[is.na(ORIGIN_DESCRIPTION)]), NA),\n            DESTINATION_PT_WITH_NA = ifelse(any(is.na(DESTINATION_DESCRIPTION)), unique(DESTINATION_PT_CODE[is.na(DESTINATION_DESCRIPTION)]), NA))\n\nprint(missing_stops_dec)\n```\n:::\n\n\n**Note: Bus stop 65139 is no longer in operation**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmerged_bus_dec <- merged_bus_dec %>%\n  filter(!is.na(ORIGIN_DESCRIPTION) & !is.na(DESTINATION_DESCRIPTION))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#write_rds(merged_bus_dec, \"data/rds/merged_bus_dec.rds\")\n```\n:::\n\n\n## Adding Bus Stop Description, Coordinates and Subzone Information for January 2024\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(bus_jan)\nhead(bus_dec)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbus_jan$ORIGIN_PT_CODE <- as.character(bus_jan$ORIGIN_PT_CODE)\nbus_jan$DESTINATION_PT_CODE <- as.character(bus_jan$DESTINATION_PT_CODE)\n\nmerged_bus_jan <- left_join(bus_jan, bus_coords, by = c(\"ORIGIN_PT_CODE\" = \"BusStopCode\")) %>%\n  rename(ORIGIN_SUBZONE = Subzone, ORIGIN_DESCRIPTION = Description, ORIGIN_LAT = Latitude, ORIGIN_LONG = Longitude) %>%\n  left_join(bus_coords, by = c(\"DESTINATION_PT_CODE\" = \"BusStopCode\")) %>%\n  rename(DESTINATION_SUBZONE = Subzone, DESTINATION_DESCRIPTION = Description, DESTINATION_LAT = Latitude, DESTINATION_LONG = Longitude) %>%\n  select(YEAR_MONTH, DAY_TYPE, TIME_PER_HOUR, PT_TYPE, \n         ORIGIN_PT_CODE, ORIGIN_SUBZONE, ORIGIN_DESCRIPTION, ORIGIN_LAT, ORIGIN_LONG,\n         DESTINATION_PT_CODE, DESTINATION_SUBZONE, DESTINATION_DESCRIPTION, DESTINATION_LAT, DESTINATION_LONG,\n         TOTAL_TRIPS)\n```\n:::\n\n\n## Looking for NA values\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmissing_stops_jan <- merged_bus_jan %>%\n  summarise(ORIGIN_NA = any(is.na(ORIGIN_DESCRIPTION)),\n            DESTINATION_NA = any(is.na(DESTINATION_DESCRIPTION)),\n            ORIGIN_PT_WITH_NA = ifelse(any(is.na(ORIGIN_DESCRIPTION)), unique(ORIGIN_PT_CODE[is.na(ORIGIN_DESCRIPTION)]), NA),\n            DESTINATION_PT_WITH_NA = ifelse(any(is.na(DESTINATION_DESCRIPTION)), unique(DESTINATION_PT_CODE[is.na(DESTINATION_DESCRIPTION)]), NA))\n\nprint(missing_stops_jan)\n```\n:::\n\n\n**Note: Dropping bus stop 4168 and 9022. Bus stop code should be 5 digits.**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmerged_bus_jan <- merged_bus_jan %>%\n  filter(!is.na(ORIGIN_DESCRIPTION) & !is.na(DESTINATION_DESCRIPTION))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#write_rds(merged_bus_jan, \"data/rds/merged_bus_jan.rds\")\n```\n:::\n\n\n## Creating Spacetime Object for November 2023\n\n### November 2023 Origin Trip Generation\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# for spacetime \nnov_trip_generation_origin <- merged_bus_nov %>%\n   select(ORIGIN_PT_CODE, ORIGIN_DESCRIPTION, ORIGIN_SUBZONE, TIME_PER_HOUR, TOTAL_TRIPS, ORIGIN_LAT, ORIGIN_LONG) %>%\n  group_by(ORIGIN_PT_CODE, ORIGIN_DESCRIPTION,ORIGIN_SUBZONE, TIME_PER_HOUR, ORIGIN_LAT, ORIGIN_LONG) %>%\n  summarise(`TRIPS GENERATED` = sum(`TOTAL_TRIPS`)) %>%\n  ungroup() %>%\n  st_as_sf(coords = c(\"ORIGIN_LAT\", \"ORIGIN_LONG\"),\n           crs=4326)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#write_rds(nov_trip_generation_origin, \"data/rds/nov_trip_generation_origin.rds\")\n```\n:::\n\n\n### November 2023 Destination Trip Generation\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# for spacetime \nnov_trip_generation_dest <- merged_bus_nov %>%\n   select(DESTINATION_PT_CODE, DESTINATION_DESCRIPTION, DESTINATION_SUBZONE, TIME_PER_HOUR, TOTAL_TRIPS, DESTINATION_LAT, DESTINATION_LONG) %>%\n  group_by(DESTINATION_PT_CODE, DESTINATION_DESCRIPTION,DESTINATION_SUBZONE, TIME_PER_HOUR, DESTINATION_LAT, DESTINATION_LONG) %>%\n  summarise(`TRIPS GENERATED` = sum(`TOTAL_TRIPS`)) %>%\n  ungroup() %>%\n  st_as_sf(coords = c(\"DESTINATION_LAT\", \"DESTINATION_LONG\"),\n           crs=4326)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#write_rds(nov_trip_generation_dest, \"data/rds/nov_trip_generation_dest.rds\")\n```\n:::\n\n\n## Creating Spacetime Object for December 2023\n\n### December 2023 Origin Trip Generation\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# for spacetime \ndec_trip_generation_origin <- merged_bus_dec %>%\n   select(ORIGIN_PT_CODE, ORIGIN_DESCRIPTION, ORIGIN_SUBZONE, TIME_PER_HOUR, TOTAL_TRIPS, ORIGIN_LAT, ORIGIN_LONG) %>%\n  group_by(ORIGIN_PT_CODE, ORIGIN_DESCRIPTION,ORIGIN_SUBZONE, TIME_PER_HOUR, ORIGIN_LAT, ORIGIN_LONG) %>%\n  summarise(`TRIPS GENERATED` = sum(`TOTAL_TRIPS`)) %>%\n  ungroup() %>%\n  st_as_sf(coords = c(\"ORIGIN_LAT\", \"ORIGIN_LONG\"),\n           crs=4326)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#write_rds(dec_trip_generation_origin, \"data/rds/dec_trip_generation_origin.rds\")\n```\n:::\n\n\n### December 2023 Destination Trip Generation\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# for spacetime \ndec_trip_generation_dest <- merged_bus_dec %>%\n   select(DESTINATION_PT_CODE, DESTINATION_DESCRIPTION, DESTINATION_SUBZONE, TIME_PER_HOUR, TOTAL_TRIPS, DESTINATION_LAT, DESTINATION_LONG) %>%\n  group_by(DESTINATION_PT_CODE, DESTINATION_DESCRIPTION,DESTINATION_SUBZONE, TIME_PER_HOUR, DESTINATION_LAT, DESTINATION_LONG) %>%\n  summarise(`TRIPS GENERATED` = sum(`TOTAL_TRIPS`)) %>%\n  ungroup() %>%\n  st_as_sf(coords = c(\"DESTINATION_LAT\", \"DESTINATION_LONG\"),\n           crs=4326)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#write_rds(dec_trip_generation_dest, \"data/rds/dec_trip_generation_dest.rds\")\n```\n:::\n\n\n## Creating Spacetime Object for January 2024\n\n### January Origin Trip Generation\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# for spacetime \njan_trip_generation_origin <- merged_bus_jan %>%\n   select(ORIGIN_PT_CODE, ORIGIN_DESCRIPTION, ORIGIN_SUBZONE, TIME_PER_HOUR, TOTAL_TRIPS, ORIGIN_LAT, ORIGIN_LONG) %>%\n  group_by(ORIGIN_PT_CODE, ORIGIN_DESCRIPTION,ORIGIN_SUBZONE, TIME_PER_HOUR, ORIGIN_LAT, ORIGIN_LONG) %>%\n  summarise(`TRIPS GENERATED` = sum(`TOTAL_TRIPS`)) %>%\n  ungroup() %>%\n  st_as_sf(coords = c(\"ORIGIN_LAT\", \"ORIGIN_LONG\"),\n           crs=4326)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#write_rds(jan_trip_generation_origin, \"data/rds/jan_trip_generation_origin.rds\")\n```\n:::\n\n\n### January Destination Trip Generation\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# for spacetime \njan_trip_generation_dest <- merged_bus_jan %>%\n   select(DESTINATION_PT_CODE, DESTINATION_DESCRIPTION, DESTINATION_SUBZONE, TIME_PER_HOUR, TOTAL_TRIPS, DESTINATION_LAT, DESTINATION_LONG) %>%\n  group_by(DESTINATION_PT_CODE, DESTINATION_DESCRIPTION,DESTINATION_SUBZONE, TIME_PER_HOUR, DESTINATION_LAT, DESTINATION_LONG) %>%\n  summarise(`TRIPS GENERATED` = sum(`TOTAL_TRIPS`)) %>%\n  ungroup() %>%\n  st_as_sf(coords = c(\"DESTINATION_LAT\", \"DESTINATION_LONG\"),\n           crs=4326)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#write_rds(jan_trip_generation_dest, \"data/rds/jan_trip_generation_dest.rds\")\n```\n:::\n\n\n## Converting .rds files to .csv files\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmerged_bus_nov <- read_rds(\"data/rds/merged_bus_nov.rds\")\nwrite.csv(merged_bus_nov, file = \"data/merged_bus_nov.csv\", row.names = FALSE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmerged_bus_dec <- read_rds(\"data/rds/merged_bus_dec.rds\")\nwrite.csv(merged_bus_dec, file = \"data/merged_bus_dec.csv\", row.names = FALSE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmerged_bus_jan <- read_rds(\"data/rds/merged_bus_jan.rds\")\nwrite.csv(merged_bus_jan, file = \"data/merged_bus_jan.csv\", row.names = FALSE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbus_coords_subzone <- read_rds(\"data/rds/bus_coords_subzone.rds\")\nwrite.csv(bus_coords_subzone, file = \"data/bus_coords_subzone.csv\", row.names = FALSE)\n```\n:::\n\n\n\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\n\n# **2.0 Visualising Places of Interest**\n\nOur POIs include:\n\n-   Business\n\n-   Financial Institutions\n\n-   Entertainment\n\n-   F&B Outlets\n\n-   Leisure & Recreation Spots\n\n-   Retail Shops\n\n## **Business**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('view')\ntm_shape(business) + \n  tm_bubbles(col = 'blue', size = 0.001, alpha = 0.5, border.col = \"lightgrey\")\n```\n:::\n\n\n## **Financial Institutions**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('view')\ntm_shape(fininst) + \n  tm_bubbles(col = 'red', size = 0.001, alpha = 0.5, border.col = \"lightgrey\")\n```\n:::\n\n\n## **Entertainment**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('view')\ntm_shape(entertainment) + \n  tm_bubbles(col = 'black', size = 0.001, alpha = 0.5, border.col = \"lightgrey\")\n```\n:::\n\n\n## **F&B Outlets**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('view')\ntm_shape(f_and_b) + \n  tm_bubbles(col = 'green', size = 0.001, alpha = 0.5, border.col = \"lightgrey\")\n```\n:::\n\n\n## **Leisure & Recreation Spots**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('view')\ntm_shape(leisure) + \n  tm_bubbles(col = 'orange', size = 0.001, alpha = 0.5, border.col = \"lightgrey\")\n```\n:::\n\n\n## **Retail Shops**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('view')\ntm_shape(retail) + \n  tm_bubbles(col = 'purple', size = 0.001, alpha = 0.5, border.col = \"lightgrey\")\n```\n:::\n\n\n## Residential Areas\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhdb <- st_as_sf(hdb, coords = c(\"lng\", \"lat\"), crs = 4326)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('view')\ntm_shape(hdb) + \n  tm_bubbles(col = 'pink', size = 0.001, alpha = 0.5, border.col = \"lightgrey\")\n```\n:::\n\n\n> ## **Shiny Storyboard**\n\n## \n\n\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\n\n# 3.0 Visualising Bus Stops in Singapore\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('view')\ntm_shape(sg_bus_stops) + \n  tm_bubbles(col = 'red', size = 0.01, alpha = 1, border.col = \"lightgrey\")+\n  tm_shape(mpsz_sf) +\ntm_polygons(alpha = 0.1, id = \"PLN_AREA_N\")+\n    tmap_options(check.and.fix = TRUE)\n```\n:::\n\n\n> ## **Shiny Storyboard**\n\n\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\n\n# 4.0 Choropleth Mapping of Population\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation <- population %>%\n  filter(Time == 2020) %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup()%>%\n  pivot_wider(names_from=AG, \n              values_from=POP) %>%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %>%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%>%\nmutate(`AGED`=rowSums(.[16:21])) %>%\nmutate(`TOTAL`=rowSums(.[3:21])) %>%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %>%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation <- population %>%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = list(toupper)) %>%\n  filter(`ECONOMY ACTIVE` > 0)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_population <- left_join(mpsz_sf, population,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n```\n:::\n\n\n## Young Population\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('view')\ntm_shape(mpsz_population)+\n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Greens\")\n```\n:::\n\n\n## Economically Active Population\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('view')\ntm_shape(mpsz_population)+\n  tm_polygons(\"ECONOMY ACTIVE\", \n              style = \"quantile\", \n              palette = \"Oranges\")\n```\n:::\n\n\n## Aged Population\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('view')\ntm_shape(mpsz_population)+\n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Reds\")\n```\n:::\n\n\n## Total Population\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('view')\ntm_shape(mpsz_population)+\n  tm_polygons(\"TOTAL\", \n              style = \"quantile\", \n              palette = \"Blues\")\n```\n:::\n\n\n> ## **Shiny Storyboard**\n>\n> -   total\n>\n> -   young\n>\n> -   economically active\n>\n> -   aged\n>\n> -   \n\n\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\n\n# 5.0 Passenger Volume Trend\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_graph <- function(filename, plot_title, day_type) {\n  data <- read.csv(filename) %>%\n    filter(DAY_TYPE == day_type) %>%\n    select(ORIGIN_PT_CODE, TIME_PER_HOUR, TOTAL_TRIPS, ORIGIN_LAT, ORIGIN_LONG) %>%\n    group_by(ORIGIN_PT_CODE, TIME_PER_HOUR) %>%\n    summarise(TRIPS_GENERATED = sum(TOTAL_TRIPS)) %>%\n    ungroup()\n  \n  data$TIME_INTERVAL <- as.factor(data$TIME_PER_HOUR)\n  \n  ggplot(data, aes(x=TIME_INTERVAL, y=TRIPS_GENERATED)) +\n    geom_bar(stat=\"identity\", fill=\"deepskyblue4\") +\n    ggtitle(plot_title) +\n    xlab(\"Time Interval\") +\n    ylab(\"Total Trips\")\n}\n```\n:::\n\n\n## **Weekday Trend**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnov_day <- create_graph(\"data/merged_bus_nov.csv\", \"November 2023 Weekday\", \"WEEKDAY\")\nnov_day\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndec_day <- create_graph(\"data/merged_bus_dec.csv\", \"December 2023 Weekday\", \"WEEKDAY\")\ndec_day\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\njan_day <- create_graph(\"data/merged_bus_jan.csv\", \"January 2024 Weekday\", \"WEEKDAY\")\njan_day\n```\n:::\n\n\n## **Weekend Trend**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnov_end <- create_graph(\"data/merged_bus_nov.csv\", \"November 2023 Weekend\", \"WEEKENDS/HOLIDAY\")\nnov_end\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndec_end <- create_graph(\"data/merged_bus_dec.csv\", \"December 2023 Weekend\", \"WEEKENDS/HOLIDAY\")\ndec_end\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\njan_end <- create_graph(\"data/merged_bus_jan.csv\", \"January 2024 Weekend\", \"WEEKENDS/HOLIDAY\")\njan_end\n```\n:::\n\n\n> ## **Shiny Storyboard**\n>\n> -   select month\n>\n> -   weekday/weekend\n>\n> -   insight: identified the peak time intervals\n\n\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\n\n# 6.0 Most and Least Popular Stations during Peak Hours\n\n\n::: {.cell}\n\n```{.r .cell-code}\nt5b5 <- function(filename, plot_title, day_type, time_interval){\n  \n  df <- edges <- read_csv(filename) %>% \n  filter(DAY_TYPE == day_type & TIME_PER_HOUR %in% time_interval) %>%\n  group_by(ORIGIN_PT_CODE) %>%\n  summarise(TRIPS_GENERATED = sum(TOTAL_TRIPS)) %>%\n  na.omit() %>%\n  arrange(desc(TRIPS_GENERATED))\n  \n  t5 <- df %>%\n    head(5) %>%\n    rename(top_5 = ORIGIN_PT_CODE, top_5_trip_count = TRIPS_GENERATED)\n  \n  b5 <- df %>%\n    tail(5) %>%\n    rename(bot_5 = ORIGIN_PT_CODE, bot_5_trip_count = TRIPS_GENERATED)\n\n  return(cbind(t5, b5))\n}\n```\n:::\n\n\n## November 2023 Weekday Top 5 Most and Least Popular Stations by Time of Day\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnov_day_trip <- t5b5(\"data/merged_bus_nov.csv\", \"Top 5 stations for November 2023 Weekdays\", \"WEEKDAY\", c(6, 7, 17, 18))\nnov_day_morn <- t5b5(\"data/merged_bus_nov.csv\", \"Top 5 stations for November 2023 Weekdays 6am - 8am\", \"WEEKDAY\", c(6, 7))\nnov_day_eve <- t5b5(\"data/merged_bus_nov.csv\", \"Top 5 stations for November 2023 Weekdays 5pm - 7pm\", \"WEEKDAY\", c(17, 18))\n\nnov_day_trip\n```\n:::\n\n\n## December 2023 Weekday Top 5 Most and Least PopularStations by Time of Day\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndec_day_trip <- t5b5(\"data/merged_bus_dec.csv\", \"Top 5 stations for December 2023 Weekdays\", \"WEEKDAY\", c(6, 7, 17, 18))\ndec_day_morn <- t5b5(\"data/merged_bus_dec.csv\", \"Top 5 stations for December 2023 Weekdays 6am - 8am\", \"WEEKDAY\", c(6, 7))\ndec_day_eve <- t5b5(\"data/merged_bus_dec.csv\", \"Top 5 stations for December 2023 Weekdays 5pm - 7pm\", \"WEEKDAY\", c(17, 18))\n```\n:::\n\n\n## January 2024 Weekday Top 5 Most and Least Popular Stations by Time of Day\n\n\n::: {.cell}\n\n```{.r .cell-code}\njan_day_trip <- t5b5(\"data/merged_bus_jan.csv\", \"Top 5 stations for January 2024 Weekdays\", \"WEEKDAY\", c(6, 7, 17, 18))\njan_day_morn <- t5b5(\"data/merged_bus_jan.csv\", \"Top 5 stations for January 2024 Weekdays 6am - 8am\", \"WEEKDAY\", c(6, 7))\njan_day_eve <- t5b5(\"data/merged_bus_jan.csv\", \"Top 5 stations for January 2024 Weekdays 5pm - t5b5\", \"WEEKDAY\", c(17, 18))\n```\n:::\n\n\n## November 2023 Weekend Top 5 Most and Least Popular Stations by Time of Day\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnov_end_trip <- t5b5(\"data/merged_bus_nov.csv\", \"Top 5 stations for November 2023 Weekends\", \"WEEKENDS/HOLIDAY\", c(11, 12, 16, 17))\nnov_end_morn <- t5b5(\"data/merged_bus_nov.csv\", \"Top 5 stations for November 2023 Weekends 11am - 1pm\", \"WEEKENDS/HOLIDAY\", c(11, 12))\nnov_end_eve <- t5b5(\"data/merged_bus_nov.csv\", \"Top 5 stations for November 2023 Weekends 4pm - 6pm\", \"WEEKENDS/HOLIDAY\", c(16, 17))\n```\n:::\n\n\n## December 2023 Weekend Top 5 Most and Least Popular Stations by Time of Day\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndec_end_trip <- t5b5(\"data/merged_bus_dec.csv\", \"Top 5 stations for December 2023 Weekends\", \"WEEKENDS/HOLIDAY\", c(11, 12, 16, 17))\ndec_end_morn <- t5b5(\"data/merged_bus_dec.csv\", \"Top 5 stations for December 2023 Weekends 11am - 1pm\", \"WEEKENDS/HOLIDAY\", c(11, 12))\ndec_end_eve <- t5b5(\"data/merged_bus_dec.csv\", \"Top 5 stations for December 2023 Weekends 4pm - 6pm\", \"WEEKENDS/HOLIDAY\", c(16, 17))\n```\n:::\n\n\n## January 2024 Weekend Top 5 Most and Least Popular Stations by Time of Day\n\n\n::: {.cell}\n\n```{.r .cell-code}\njan_end_trip <- t5b5(\"data/merged_bus_jan.csv\", \"Top 5 stations for January 2024 Weekends\", \"WEEKENDS/HOLIDAY\", c(11, 12, 16, 17))\njan_end_morn <- t5b5(\"data/merged_bus_jan.csv\", \"Top 5 stations for January 2024 Weekends 11am - 1pm\", \"WEEKENDS/HOLIDAY\", c(11, 12))\njan_end_evep <- t5b5(\"data/merged_bus_jan.csv\", \"Top 5 stations for January 2024 Weekends 4pm - 6pm\", \"WEEKENDS/HOLIDAY\", c(16, 17))\n```\n:::\n\n\n## Heatmap\n\n### November 2023 Weekday Origin\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrips_by_origin <- bus_nov %>%\n  filter(DAY_TYPE == \"WEEKDAY\" & TIME_PER_HOUR >= 6 & TIME_PER_HOUR <= 23) %>%\n  group_by(TIME_PER_HOUR, ORIGIN_PT_CODE) %>%\n  summarise(TOTAL_TRIPS = sum(TOTAL_TRIPS)) %>%\n  ungroup()\n\nkable(head(trips_by_origin), format = \"html\", digits = 2)\n\np <- ggplot(data = trips_by_origin,\n            aes(x = TIME_PER_HOUR, y = ORIGIN_PT_CODE, fill = TOTAL_TRIPS)) +\n  geom_tile() +\n  scale_fill_distiller(palette = \"Spectral\", name = \"Passenger Volume\") +\n  labs(x = NULL, y = NULL,\n       title = \"November 2023 Weekday Passenger Volume by Time of Day and Origin Station\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1),\n        plot.title = element_text(hjust = 0.5)) +\n  scale_x_continuous(breaks = seq(6, 23, by = 1))\n\nprint(p)\n```\n:::\n\n\n### November 2023 Weekday Destination\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrips_by_dest <- bus_nov %>%\n  filter(DAY_TYPE == \"WEEKDAY\" & TIME_PER_HOUR >= 6 & TIME_PER_HOUR <= 23) %>%\n  group_by(TIME_PER_HOUR, DESTINATION_PT_CODE) %>%\n  summarise(TOTAL_TRIPS = sum(TOTAL_TRIPS)) %>%\n  ungroup()\n\nkable(head(trips_by_dest), format = \"html\", digits = 2)\n\np <- ggplot(data = trips_by_dest,\n            aes(x = TIME_PER_HOUR, y = DESTINATION_PT_CODE, fill = TOTAL_TRIPS)) +\n  geom_tile() +\n  scale_fill_distiller(palette = \"Spectral\", name = \"Passenger Volume\") +\n  labs(x = NULL, y = NULL,\n       title = \"November 2023 Weekday Passenger Volume by Time of Day and Destination Station\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1),\n        plot.title = element_text(hjust = 0.5)) +\n  scale_x_continuous(breaks = seq(6, 23, by = 1))\n\nprint(p)\n```\n:::\n\n\n### November 2023 Weekend Origin\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrips_by_origin <- bus_nov %>%\n  filter(DAY_TYPE == \"WEEKENDS/HOLIDAY\" & TIME_PER_HOUR >= 6 & TIME_PER_HOUR <= 23) %>%\n  group_by(TIME_PER_HOUR, ORIGIN_PT_CODE) %>%\n  summarise(TOTAL_TRIPS = sum(TOTAL_TRIPS)) %>%\n  ungroup()\n\nkable(head(trips_by_origin), format = \"html\", digits = 2)\n\np <- ggplot(data = trips_by_origin,\n            aes(x = TIME_PER_HOUR, y = ORIGIN_PT_CODE, fill = TOTAL_TRIPS)) +\n  geom_tile() +\n  scale_fill_distiller(palette = \"Spectral\", name = \"Passenger Volume\") +\n  labs(x = NULL, y = NULL,\n       title = \"November 2023 Weekend Passenger Volume by Time of Day and Origin Station\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1),\n        plot.title = element_text(hjust = 0.5)) +\n  scale_x_continuous(breaks = seq(6, 23, by = 1))\n\nprint(p)\n```\n:::\n\n\n### November 2023 Weekend Destination\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrips_by_dest <- bus_nov %>%\n  filter(DAY_TYPE == \"WEEKENDS/HOLIDAY\" & TIME_PER_HOUR >= 6 & TIME_PER_HOUR <= 23) %>%\n  group_by(TIME_PER_HOUR, DESTINATION_PT_CODE) %>%\n  summarise(TOTAL_TRIPS = sum(TOTAL_TRIPS)) %>%\n  ungroup()\n\nkable(head(trips_by_dest), format = \"html\", digits = 2)\n\np <- ggplot(data = trips_by_dest,\n            aes(x = TIME_PER_HOUR, y = DESTINATION_PT_CODE, fill = TOTAL_TRIPS)) +\n  geom_tile() +\n  scale_fill_distiller(palette = \"Spectral\", name = \"Passenger Volume\") +\n  labs(x = NULL, y = NULL,\n       title = \"November 2023 Weekend Passenger Volume by Time of Day and Destination Station\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1),\n        plot.title = element_text(hjust = 0.5)) +\n  scale_x_continuous(breaks = seq(6, 23, by = 1))\n\nprint(p)\n```\n:::\n\n\n> ## **Shiny Storyboard**\n>\n> -   select month\n>\n> -   Select Time of Day\n>\n> -   Select Day Type\n>\n> -   Select Most Popular / Least Popular\n>\n> -   Plot on Map\n>\n> -   heatmap\n>\n>     \\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\n\n# 7.0 Emerging Hot Spot Analysis\n\n## Network analysis\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbus_coords_subzone <- read_csv(\"data/bus_coords_subzone.csv\") \n\n# variable that selects the coordinates\nnodes_xy <- bus_coords_subzone %>%\n  select(Longitude, Latitude) %>%\n  rename(x = Longitude, y = Latitude)\n```\n:::\n\n\nRead file containing trip data for the month.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_weighted_graph <- function(fn, origin, day, time_period, title){\n  \n  edges <- read_csv(fn) %>% \n  filter(ORIGIN_PT_CODE == origin & DAY_TYPE == day & TIME_PER_HOUR %in% time_period) %>%\n  rename(weight = \"TOTAL_TRIPS\") %>%\n  select(ORIGIN_PT_CODE, DESTINATION_PT_CODE, weight) %>%\n  na.omit()\n\n  tr_graph <- tbl_graph(nodes = bus_coords_subzone,\n                        edges = edges,\n                        directed = TRUE)\n  \n  g <- graph_from_data_frame(edges, directed = TRUE, vertices = bus_coords_subzone)\n  \n  ggraph(tr_graph, nodes_xy) +\n    geom_edge_arc(aes(edge_width = weight, circular = FALSE), curvature = 0.33, alpha = 0.1) +\n    scale_edge_width_continuous(range = c(0.5, 8), guide = FALSE) +\n    geom_node_point() +\n    ggtitle(title)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_weighted_graph <- function(fn, origin, day, time_period, title) {\n  \n  # Load necessary libraries\n  library(tidyverse)\n  library(igraph)\n  library(ggraph)\n  \n  # Read edges data\n  edges <- read_csv(fn) %>% \n    filter(ORIGIN_PT_CODE == origin & DAY_TYPE == day & TIME_PER_HOUR %in% time_period) %>%\n    rename(weight = \"TOTAL_TRIPS\") %>%\n    select(ORIGIN_PT_CODE, DESTINATION_PT_CODE, weight) %>%\n    na.omit()\n  \n  # Check if edges dataframe is empty\n  if (nrow(edges) == 0) {\n    stop(\"No data found for the specified criteria.\")\n  }\n  \n  # Load nodes data (replace 'your_nodes_file.csv' with your actual file)\n  bus_coords_subzone <- read_csv(\"data/bus_coords_subzone.csv\")\n  \n  # Check if nodes dataframe is empty\n  if (nrow(bus_coords_subzone) == 0) {\n    stop(\"No nodes data found.\")\n  }\n  \n  # Create graph\n  tr_graph <- tbl_graph(nodes = bus_coords_subzone, edges = edges, directed = TRUE)\n  \n  # Plot the graph\n  ggraph(tr_graph, nodes_xy) +\n    geom_edge_arc(aes(edge_width = weight, circular = FALSE), curvature = 0.33, alpha = 0.1) +\n    scale_edge_width_continuous(range = c(0.5, 8), guide = FALSE) +\n    geom_node_point() +\n    ggtitle(title)\n}\n\n# Example usage\ncreate_weighted_graph(\"data/merged_bus_jan.csv\", \"46009\", \"WEEKDAY\", c(6, 7), \"January Weekday Woodlands Int Bus Stop 6am - 8am\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_weighted_graph(\"data/merged_bus_jan.csv\", \"46009\", \"WEEKDAY\", c(6, 7), \"January Weekday Woodlands Int Bus Stop 6am - 8am\")\n\ncreate_weighted_graph(\"data/merged_bus_jan.csv\", \"22009\", \"WEEKDAY\", c(17, 18), \"January Weekday Boon Lay Int Bus Stop 5pm - 7pm\")\n```\n:::\n\n\n# Centrality index\n\n\n::: {.cell}\n\n```{.r .cell-code}\nedges1 <- read_csv(\"data/merged_bus_jan.csv\") %>%\n  rename(weight = \"TOTAL_TRIPS\") %>%\n  select(ORIGIN_PT_CODE, DESTINATION_PT_CODE, weight) %>%\n  na.omit()\n\ntr_graph1 <- tbl_graph(nodes = bus_coords_subzone, edges = edges1, directed = TRUE) %>% mutate(betweeness_centrality = centrality_betweenness())\n```\n:::\n\n\n## Betweenness Centrality for Bus Stations\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(leaflet)\n\ng <- tr_graph1 %>%\n  mutate(betweenness_centrality = centrality_betweenness()) %>%\n  ggraph(layout = nodes_xy) + \n  geom_node_point(aes(size = betweenness_centrality, alpha=0.5)) +\n  geom_node_text(aes(label = ifelse(rank(-betweenness_centrality) <= 5, sub(\"\\\\s*(BUS)\\\\s+STATION\", \"\", stn_name), \"\"), size = 12)) +\n  theme_graph() +\n  labs(title = \"Betweenness Centrality of Bus Stations\")\n\ng\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- leaflet(nodes_xy) %>%\n addTiles() |>\n  addMarkers(lat=~y, lng=~x)\nmy_map\n```\n:::\n\n\n\n# Spacetime\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmerged_bus_nov <- read_rds(\"data/rds/merged_bus_nov.rds\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nehsa_tg <- emerging_hotspot_analysis(tg_spacetime, \n                          \"TRIPS GENERATED\", \n                          threshold = 0.05)\n\nggplot(data = ehsa_tg,\n       aes(x = classification)) +\n  geom_bar()\n\nnb <- st_knn(trip_generation_weekday, \n             k = 1, symmetric = FALSE)\nhead (nb)\n\nwt <- st_weights(nb, style = \"W\", allow_zero = NULL)\n\ngi_stars <- local_gstar_perm(tg_spacetime$'TRIPS GENERATED', nb, wt, nsim = 499, alternative = \"two.sided\")\n\nkable(head(gi_stars, n=10))\n\nehsa_weekday <- trip_generation_weekday %>%\n  cbind(gi_stars)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"view\")\n\ntm_shape(trip_generation_weekday)+\ntm_bubbles(col = \"red\",\n           size = 1,\n           border.col = \"black\",\n           border.lwd = 1)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}