{
  "hash": "9b5950405c28ed9b721469a8760ce555",
  "result": {
    "markdown": "---\ntitle: \"In-class Exercise 9:Geographically Weighted Predictive Models\"\nformat:\n  html:\n    toc: true\nexecute: \n  eval: false\n  warning: false\n  freeze: true\n  fig-retine: 3\ndate: \"March 18,2024\"\ndate-modified: \"last-modified\"\n---\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spdep, GWmodel, SpatialML, \n              tmap, Metrics,  tidymodels, tidyverse, gtsummary, rpart, rpart.plot, ggstatsplot, performance,)\n```\n:::\n\n\nrpart and rpart.plot is for recursive functioning purposes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrs_sf <- read_rds(\"data/rds/HDB_resale.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nresale_split <- initial_split(rs_sf, \n                              prop = 5/10,)\ntrain_sf <- training(resale_split)\ntest_sf <- testing(resale_split)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_sf <- train_sf %>%\n  st_drop_geometry() %>%\n  as.data.frame()\n\ntest_df <- test_sf %>%\n  st_drop_geometry() %>%\n  as.data.frame()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrs_sf1 <- rs_sf %>%\n  st_drop_geometry()\nggcorrmat(rs_sf1[,2:17])\n```\n:::\n\n\n\\^ to apply statistical learning methods but not crucial for machine learning\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_df <- train_df %>%\n  select(-c(PROX_CHAS))\n\ntrain_sf <- train_sf %>%\n  select(-c(PROX_CHAS))\n\ntest_df <- tset_df %>%\n  select(-c(PROX_CHAS))\n\ntest_sf <- test_sf %>%\n  select(-c(PROX_CHAS))\n```\n:::\n\n\n'-' to exclude the column from selection\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrs_mlr <- lm(formula = RESALE_PRICE~\n                  FLOOR_AREA_SQM +\n                  STOREY_ORDER + \n                  REMAINING_LEASE_MTHS +\n                  PROX_CBD + \n                  PROX_ELDERLYCARE +\n                  PROX_HAWKER +\n                  PROX_MRT +\n                  PROX_PARK +\n                  PROC_GOOD_PRISCH +\n                  PROX_MALL + \n                  PROX_SUPERMARKET +\n                  WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE +\n                  WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                data=train_df)\n```\n:::\n\n\nproximity to CHAS is removed\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords <- st_coordinates(rs_sf)\ncoords_train <- st_coordinates(train_sf)\ncoords_test <- st_coordinates(test_sf)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nrs_rp <- rpart(formula = RESALE_PRICE~\n                FLOOR_AREA_SQM +\n                  STOREY_ORDER + \n                  REMAINING_LEASE_MTHS +\n                  PROX_CBD + \n                  PROX_ELDERLYCARE +\n                  PROX_HAWKER +\n                  PROX_MRT +\n                  PROX_PARK +\n                  PROC_GOOD_PRISCH +\n                  PROX_MALL + \n                  PROX_SUPERMARKET +\n                  WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE +\n                  WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                data=train_df)\nrs_rp\n```\n:::\n\n\nproximity to CHAS is removed\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrpart.plot(rs_rp)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nrs_rf <- ranger(formula = RESALE_PRICE~\n                  FLOOR_AREA_SQM +\n                  STOREY_ORDER + \n                  REMAINING_LEASE_MTHS +\n                  PROX_CBD + \n                  PROX_ELDERLYCARE +\n                  PROX_HAWKER +\n                  PROX_MRT +\n                  PROX_PARK +\n                  PROC_GOOD_PRISCH +\n                  PROX_MALL + \n                  PROX_SUPERMARKET +\n                  WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE +\n                  WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                data=train_df,\n                importance= \"impurity\")\nrs_rf\n```\n:::\n\n\nranger package is usually used in geospatial machine learning\n\nimportance is used to define what variables contribute to classification\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvi <- as.data.frame(rs_rf$variable.importance)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvi <- as.data.frame(rs_sf$variable,importance)\nvi$variables <-rownames (vi)\nvi <- vi %>%\n  rename(vi = \"rs_rf$variable,importance\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data =vi,\n       aes(x=vi,\n           y = reorder(variables, vi))) +\n  geom_bar(stat=\"identity\")\n```\n:::\n\n\nbw.min and bw.max can reduce computational time\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrf_pred <-read_rds(\"data/models/grf_pred.rds\")\ngrf_pred_df <- as.data.frame(grf_pred)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngrf_pred <- predict.grf(rs_grf,\n                        test_df,\n                        x.var.name=\"X\",\n                        y.var.name=\"Y\",\n                        )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_pred <- test_df %>%\n  select(RESALE_PRICE) %>%\n  cbind(grf_pred_df)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_pred <- predict(rs_rf, test_df)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_pred_df <- as.data.frame (rf_pred$predictions)%>%\n  rename(rf_pred = \"rf_pred$predictions\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_pred <-cbind(test_pred,\n                  rf_pred_df)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmlr_pred <- predict(rs_mlr, test_df)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmlr_pred_df <- as.data.frame (mlr_pred)%>%\n  rename(mlr_pred = \"mlr_pred\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_pred <-cbind(test_pred,\n                  mlr_pred_df)\n```\n:::\n\n\nusing yardstick to compare model comparison\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyardstick::rmse(test_pred,\n                RESALE_PRICE,\n                mlr_pred)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmc <- test_pred %>%\n  oivot_longer(cols =c(2:4),\n               names_to =\"models\",\n               values_to =\"predicted\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = test_data_p,\n       aes(x = GRF_pred,\n           y = resale_price)) +\n  geom_point()\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}