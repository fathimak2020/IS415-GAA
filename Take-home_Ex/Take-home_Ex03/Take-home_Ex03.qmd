---
title: "Take Home Exercise 3: Prototyping Modules for Geospatial Analytics Shiny Application"
format:
  html:
    toc: true
execute: 
  eval: false
  warning: false
  freeze: true
  fig-retine: 3
date: "`r format(Sys.Date(), '%Y-%m-%d')`"
date-modified: "last-modified"
---

# **Analysing Push-Pull Factors for Public Bus Demand in Singapore Using Spatial Econometric Interaction Modelling**

This project investigates the determinants of public bus demand in Singapore through the application of Spatial Econometric Interaction Modeling. The findings offer valuable insights for urban planners, policymakers, and researchers aiming to optimise mixed-use developments and promote sustainable urban living through a deeper understanding of public bus demand factors.

# **My Responsibilities**

-   Data Preparation

-   Places of Interest Visualisation (Business, Financial Institutions, Entertainment, F&B Outlets, Leisure & Recreation Spots, Retail Shops, Schools, Hospitals and Polyclinic, Residential Areas)

-   Bus Stops in Singapore Visualisation

-   Choropleth Mapping of Population

-   Passenger Volume Trend Analysis

-   Most and Least Popular Stations

-   Spatial Heatmaps

-   Network Analysis

-   Bus Stop Centrality

-   Correlation Matrix

-   Emerging Hot Spot Analysis

::: callout-note
**Images used in Shiny Story are sample images for reference only**
:::

## **Data import and preparation**

### **Import R packages**

```{r}
pacman::p_load(sf, sfdep, tidyverse, tmap, spdep, knitr, leaflet, ggthemes, knitr, plotly, igraph, ggraph, corrplot, data.table, reshape2)
```

### **Import data**

In our analysis we need these data

-   URAâ€™s Masterplan Subzone 2019 Layer

-   Bus Stop Locations (LTA)

-   Passenger Volume by Origin Destination Bus Stops (LTA Data Mall)

-   Population Data

-   Residential Areas

-   Schools from MOE

-   Places of Interest

#### **Aspatial data**

```{r}
bus_nov <- read_csv("data/origin_destination_bus_202311.csv")
bus_dec <- read_csv("data/origin_destination_bus_202312.csv")
bus_jan <- read_csv("data/origin_destination_bus_202401.csv")
population <- read_csv("data/respopagesextod2011to2020.csv")
```

#### **Geospatial data**

```{r}
mpsz_sf <- st_read(dsn = "data/geospatial", layer = "MPSZ-2019") %>%
  st_transform(crs = 3414)

bus_coords <- read_csv("data/bus_stop.csv")

business <- st_read(dsn = "data/geospatial", 
                   layer = "Business")
  
fininst <- st_read(dsn = "data/geospatial", 
                   layer = "FinServ")

entertainment <- st_read(dsn = "data/geospatial", 
                   layer = "entertn")

f_and_b <- st_read(dsn = "data/geospatial", 
                   layer = "F&B")

leisure <- st_read(dsn = "data/geospatial", 
                   layer = "Liesure&Recreation")

retail <- st_read(dsn = "data/geospatial", 
                   layer = "Retails") 

residential <- read_csv('data/hdb.csv')

schools <- read_csv('data/schoolsclean.csv')

hospitals <- read_csv('data/HospitalsPolyclinics v_2024.csv')
```

## 1.0 Data Preparation

```{r}
bus_coords_sf <- st_as_sf(bus_coords, coords = c("Longitude", "Latitude"), crs = 4326)
```

```{r}
bus_coords_sf <- st_transform(bus_coords_sf, st_crs(mpsz_sf))
```

### **Extracting Singapore Bus Stop Locations**

```{r}
sg_bus_stops <- st_intersection(bus_coords_sf, mpsz_sf)
bus_stop_subzone <- st_intersection(sg_bus_stops, mpsz_sf)
sg_bus_stops$Subzone <- bus_stop_subzone$PLN_AREA_N
```

### **Adding Subzone Information to Singapore Bus Stop Locations**

```{r}
merged_data <- merge(bus_coords, sg_bus_stops, by = "BusStopCode", all.x = TRUE)
bus_coords$Subzone <- merged_data$PLN_AREA_N
bus_coords <- bus_coords[, c("BusStopCode", "RoadName", "Description", "Subzone", "Latitude", "Longitude")]
bus_coords_subzone <- bus_coords
```

```{r}
punggol_end <- data.frame(BusStopCode = 65139,
                         RoadName = "Punggol Rd",
                         Description = "Punggol End/Punggol Jetty",
                         Subzone = "PUNGGOL",
                         Latitude = 1.421640,
                         Longitude = 103.9107)

bus_coords_subzone <- rbind(bus_coords_subzone, punggol_end)
```

```{r}
#write_rds(bus_coords_subzone, "data/rds/bus_coords_subzone.rds")
```

Note: Bus Stop 65139 is missing from bus_coords, manually inserting a record for it.

## Adding Bus Stop Description, Coordinates and Subzone Information for November 2023

```{r}
merged_bus_nov <- left_join(bus_nov, bus_coords_subzone, by = c("ORIGIN_PT_CODE" = "BusStopCode")) %>%
  rename(ORIGIN_SUBZONE = Subzone, ORIGIN_DESCRIPTION = Description, ORIGIN_LAT = Latitude, ORIGIN_LONG = Longitude) %>%
  left_join(bus_coords, by = c("DESTINATION_PT_CODE" = "BusStopCode")) %>%
  rename(DESTINATION_SUBZONE = Subzone, DESTINATION_DESCRIPTION = Description, DESTINATION_LAT = Latitude, DESTINATION_LONG = Longitude) %>%
  select(YEAR_MONTH, DAY_TYPE, TIME_PER_HOUR, PT_TYPE, 
         ORIGIN_PT_CODE, ORIGIN_SUBZONE, ORIGIN_DESCRIPTION, ORIGIN_LAT, ORIGIN_LONG,
         DESTINATION_PT_CODE, DESTINATION_SUBZONE, DESTINATION_DESCRIPTION, DESTINATION_LAT, DESTINATION_LONG,
         TOTAL_TRIPS)

```

```{r}
merged_bus_nov <- merged_bus_nov %>%
  mutate(DESTINATION_SUBZONE = ifelse(DESTINATION_PT_CODE == 65139, "PUNGGOL", DESTINATION_SUBZONE),
         DESTINATION_DESCRIPTION = ifelse(DESTINATION_PT_CODE == 65139, "Punggol End / Punggol Jetty", DESTINATION_DESCRIPTION),
         DESTINATION_LAT = ifelse(DESTINATION_PT_CODE == 65139, 1.421640, DESTINATION_LAT),
         DESTINATION_LONG = ifelse(DESTINATION_PT_CODE == 65139, 103.9107, DESTINATION_LONG))
```

Note: Bus Stop 65139 is missing from bus_coords, manually inserting a record for it.

## Looking for NA values

```{r}
missing_stops <- merged_bus_nov %>%
  summarise(ORIGIN_NA = any(is.na(ORIGIN_DESCRIPTION)),
            DESTINATION_NA = any(is.na(DESTINATION_DESCRIPTION)),
            ORIGIN_PT_WITH_NA = ifelse(any(is.na(ORIGIN_DESCRIPTION)), unique(ORIGIN_PT_CODE[is.na(ORIGIN_DESCRIPTION)]), NA),
            DESTINATION_PT_WITH_NA = ifelse(any(is.na(DESTINATION_DESCRIPTION)), unique(DESTINATION_PT_CODE[is.na(DESTINATION_DESCRIPTION)]), NA))

print(missing_stops)
```

```{r}
#write_rds(merged_bus_nov, "data/rds/merged_bus_nov.rds")
```

## Adding Bus Stop Description, Coordinates and Subzone Information for December 2023

```{r}
merged_bus_dec <- left_join(bus_dec, bus_coords_subzone, by = c("ORIGIN_PT_CODE" = "BusStopCode")) %>%
  rename(ORIGIN_SUBZONE = Subzone, ORIGIN_DESCRIPTION = Description, ORIGIN_LAT = Latitude, ORIGIN_LONG = Longitude) %>%
  left_join(bus_coords, by = c("DESTINATION_PT_CODE" = "BusStopCode")) %>%
  rename(DESTINATION_SUBZONE = Subzone, DESTINATION_DESCRIPTION = Description, DESTINATION_LAT = Latitude, DESTINATION_LONG = Longitude) %>%
  select(YEAR_MONTH, DAY_TYPE, TIME_PER_HOUR, PT_TYPE, 
         ORIGIN_PT_CODE, ORIGIN_SUBZONE, ORIGIN_DESCRIPTION, ORIGIN_LAT, ORIGIN_LONG,
         DESTINATION_PT_CODE, DESTINATION_SUBZONE, DESTINATION_DESCRIPTION, DESTINATION_LAT, DESTINATION_LONG,
         TOTAL_TRIPS)
```

```{r}
merged_bus_dec <- merged_bus_dec %>%
  mutate(DESTINATION_SUBZONE = ifelse(DESTINATION_PT_CODE == 65139, "PUNGGOL", DESTINATION_SUBZONE),
         DESTINATION_DESCRIPTION = ifelse(DESTINATION_PT_CODE == 65139, "Punggol End / Punggol Jetty", DESTINATION_DESCRIPTION),
         DESTINATION_LAT = ifelse(DESTINATION_PT_CODE == 65139, 1.421640, DESTINATION_LAT),
         DESTINATION_LONG = ifelse(DESTINATION_PT_CODE == 65139, 103.9107, DESTINATION_LONG))
```

Note: Bus Stop 65139 is missing from bus_coords, manually inserting a record for it.

## Looking for NA values

```{r}
missing_stops_dec <- merged_bus_dec %>%
  summarise(ORIGIN_NA = any(is.na(ORIGIN_DESCRIPTION)),
            DESTINATION_NA = any(is.na(DESTINATION_DESCRIPTION)),
            ORIGIN_PT_WITH_NA = ifelse(any(is.na(ORIGIN_DESCRIPTION)), unique(ORIGIN_PT_CODE[is.na(ORIGIN_DESCRIPTION)]), NA),
            DESTINATION_PT_WITH_NA = ifelse(any(is.na(DESTINATION_DESCRIPTION)), unique(DESTINATION_PT_CODE[is.na(DESTINATION_DESCRIPTION)]), NA))

print(missing_stops_dec)
```

```{r}
#write_rds(merged_bus_dec, "data/rds/merged_bus_dec.rds")
```

## Adding Bus Stop Description, Coordinates and Subzone Information for January 2024

```{r}
head(bus_jan)
head(bus_dec)

bus_jan$ORIGIN_PT_CODE <- ifelse(nchar(bus_jan$ORIGIN_PT_CODE) == 4,
                                  paste0("0", bus_jan$ORIGIN_PT_CODE),
                                  bus_jan$ORIGIN_PT_CODE)

bus_jan$DESTINATION_PT_CODE <- ifelse(nchar(bus_jan$DESTINATION_PT_CODE) == 4,
                                       paste0("0", bus_jan$DESTINATION_PT_CODE),
                                       bus_jan$DESTINATION_PT_CODE)

```

Note: 0s have been omitted from some bus stop codes, making them 4 digits long only. Bus stop codes have to be 5 digits long so adding a 0 infront of codes that are 4 digits long.

```{r}
bus_jan$ORIGIN_PT_CODE <- as.character(bus_jan$ORIGIN_PT_CODE)
bus_jan$DESTINATION_PT_CODE <- as.character(bus_jan$DESTINATION_PT_CODE)

merged_bus_jan <- left_join(bus_jan, bus_coords_subzone, by = c("ORIGIN_PT_CODE" = "BusStopCode")) %>%
  rename(ORIGIN_SUBZONE = Subzone, ORIGIN_DESCRIPTION = Description, ORIGIN_LAT = Latitude, ORIGIN_LONG = Longitude) %>%
  left_join(bus_coords, by = c("DESTINATION_PT_CODE" = "BusStopCode")) %>%
  rename(DESTINATION_SUBZONE = Subzone, DESTINATION_DESCRIPTION = Description, DESTINATION_LAT = Latitude, DESTINATION_LONG = Longitude) %>%
  select(YEAR_MONTH, DAY_TYPE, TIME_PER_HOUR, PT_TYPE, 
         ORIGIN_PT_CODE, ORIGIN_SUBZONE, ORIGIN_DESCRIPTION, ORIGIN_LAT, ORIGIN_LONG,
         DESTINATION_PT_CODE, DESTINATION_SUBZONE, DESTINATION_DESCRIPTION, DESTINATION_LAT, DESTINATION_LONG,
         TOTAL_TRIPS)
```

## Looking for NA values

```{r}
missing_stops_jan <- merged_bus_jan %>%
  summarise(ORIGIN_NA = any(is.na(ORIGIN_DESCRIPTION)),
            DESTINATION_NA = any(is.na(DESTINATION_DESCRIPTION)),
            ORIGIN_PT_WITH_NA = ifelse(any(is.na(ORIGIN_DESCRIPTION)), unique(ORIGIN_PT_CODE[is.na(ORIGIN_DESCRIPTION)]), NA),
            DESTINATION_PT_WITH_NA = ifelse(any(is.na(DESTINATION_DESCRIPTION)), unique(DESTINATION_PT_CODE[is.na(DESTINATION_DESCRIPTION)]), NA))

print(missing_stops_jan)
```

```{r}
#write_rds(merged_bus_jan, "data/rds/merged_bus_jan.rds")
```

## Creating Spacetime Object for November 2023

### November 2023 Origin Trip Generation

```{r}
#for spacetime
nov_trip_generation_origin <- merged_bus_nov %>%
   select(ORIGIN_PT_CODE, TIME_PER_HOUR, TOTAL_TRIPS, ORIGIN_LAT, ORIGIN_LONG) %>%
  group_by(ORIGIN_PT_CODE, TIME_PER_HOUR, ORIGIN_LAT, ORIGIN_LONG) %>%
  summarise(`TRIPS GENERATED` = sum(`TOTAL_TRIPS`)) %>%
  ungroup() %>%
  st_as_sf(coords = c("ORIGIN_LAT", "ORIGIN_LONG"),
           crs=4326)
```

```{r}
nov_org_tg_spacetime <- as_spacetime(nov_trip_generation_origin, 
                    "ORIGIN_PT_CODE", 
                    "TIME_PER_HOUR")
nov_org_tg_spacetime
```

```{r}
is_spacetime_cube(nov_org_tg_spacetime)
```

```{r}
#write_rds(nov_trip_generation_origin, "data/rds/nov_trip_generation_origin.rds")
```

### November 2023 Destination Trip Generation

```{r}
# for spacetime 
# nov_trip_generation_dest <- merged_bus_nov %>%
#    select(DESTINATION_PT_CODE, TIME_PER_HOUR, TOTAL_TRIPS, DESTINATION_LAT, DESTINATION_LONG) %>%
#   group_by(DESTINATION_PT_CODE, TIME_PER_HOUR, DESTINATION_LAT, DESTINATION_LONG) %>%
#   summarise(`TRIPS GENERATED` = sum(`TOTAL_TRIPS`)) %>%
#   ungroup() %>%
#   st_as_sf(coords = c("DESTINATION_LAT", "DESTINATION_LONG"),
#            crs=4326)
```

```{r}
nov_dest_tg_spacetime <- as_spacetime(nov_trip_generation_dest, 
                    "DESTINATION_PT_CODE", 
                    "TIME_PER_HOUR")
nov_dest_tg_spacetime
```

```{r}
is_spacetime_cube(nov_dest_tg_spacetime)
```

```{r}
#write_rds(nov_trip_generation_dest, "data/rds/nov_trip_generation_dest.rds")
```

## Creating Spacetime Object for December 2023

### December 2023 Origin Trip Generation

```{r}
# for spacetime 
# dec_trip_generation_origin <- merged_bus_dec %>%
#    select(ORIGIN_PT_CODE, TIME_PER_HOUR, TOTAL_TRIPS, ORIGIN_LAT, ORIGIN_LONG) %>%
#   group_by(ORIGIN_PT_CODE, TIME_PER_HOUR, ORIGIN_LAT, ORIGIN_LONG) %>%
#   summarise(`TRIPS GENERATED` = sum(`TOTAL_TRIPS`)) %>%
#   ungroup() %>%
#   st_as_sf(coords = c("ORIGIN_LAT", "ORIGIN_LONG"),
#            crs=4326)
```

```{r}
dec_org_tg_spacetime <- as_spacetime(dec_trip_generation_origin, 
                    "ORIGIN_PT_CODE", 
                    "TIME_PER_HOUR")
dec_org_tg_spacetime
```

```{r}
is_spacetime_cube(dec_org_tg_spacetime)
```

```{r}
#write_rds(dec_trip_generation_origin, "data/rds/dec_trip_generation_origin.rds")
```

### December 2023 Destination Trip Generation

```{r}
# for spacetime 
# dec_trip_generation_dest <- merged_bus_dec %>%
#    select(DESTINATION_PT_CODE, TIME_PER_HOUR, TOTAL_TRIPS, DESTINATION_LAT, DESTINATION_LONG) %>%
#   group_by(DESTINATION_PT_CODE, TIME_PER_HOUR, DESTINATION_LAT, DESTINATION_LONG) %>%
#   summarise(`TRIPS GENERATED` = sum(`TOTAL_TRIPS`)) %>%
#   ungroup() %>%
#   st_as_sf(coords = c("DESTINATION_LAT", "DESTINATION_LONG"),
#            crs=4326)
```

```{r}
dec_dest_tg_spacetime <- as_spacetime(dec_trip_generation_dest, 
                    "DESTINATION_PT_CODE", 
                    "TIME_PER_HOUR")
dec_dest_tg_spacetime
```

```{r}
is_spacetime_cube(dec_dest_tg_spacetime)
```

```{r}
#write_rds(dec_trip_generation_dest, "data/rds/dec_trip_generation_dest.rds")
```

## Creating Spacetime Object for January 2024

### January Origin Trip Generation

```{r}
# for spacetime 
# jan_trip_generation_origin <- merged_bus_jan %>%
#    select(ORIGIN_PT_CODE, TIME_PER_HOUR, TOTAL_TRIPS, ORIGIN_LAT, ORIGIN_LONG) %>%
#   group_by(ORIGIN_PT_CODE, TIME_PER_HOUR, ORIGIN_LAT, ORIGIN_LONG) %>%
#   summarise(`TRIPS GENERATED` = sum(`TOTAL_TRIPS`)) %>%
#   ungroup() %>%
#   st_as_sf(coords = c("ORIGIN_LAT", "ORIGIN_LONG"),
#            crs=4326)
```

```{r}
jan_org_tg_spacetime <- as_spacetime(jan_trip_generation_origin, 
                    "ORIGIN_PT_CODE", 
                    "TIME_PER_HOUR")
jan_org_tg_spacetime
```

```{r}
is_spacetime_cube(jan_org_tg_spacetime)
```

```{r}
#write_rds(jan_trip_generation_origin, "data/rds/jan_trip_generation_origin.rds")
```

### January Destination Trip Generation

```{r}
# for spacetime 
# jan_trip_generation_dest <- merged_bus_jan %>%
#    select(DESTINATION_PT_CODE, TIME_PER_HOUR, TOTAL_TRIPS, DESTINATION_LAT, DESTINATION_LONG) %>%
#   group_by(DESTINATION_PT_CODE, TIME_PER_HOUR, DESTINATION_LAT, DESTINATION_LONG) %>%
#   summarise(`TRIPS GENERATED` = sum(`TOTAL_TRIPS`)) %>%
#   ungroup() %>%
#   st_as_sf(coords = c("DESTINATION_LAT", "DESTINATION_LONG"),
#            crs=4326)
```

```{r}
jan_dest_tg_spacetime <- as_spacetime(jan_trip_generation_dest, 
                    "DESTINATION_PT_CODE", 
                    "TIME_PER_HOUR")
jan_dest_tg_spacetime
```

```{r}
is_spacetime_cube(jan_dest_tg_spacetime)
```

```{r}
#write_rds(jan_trip_generation_dest, "data/rds/jan_trip_generation_dest.rds")
```

## Converting .rds files to .csv files

```{r}
# merged_bus_nov <- read_rds("data/rds/merged_bus_nov.rds")
# write.csv(merged_bus_nov, file = "data/merged_bus_nov.csv", row.names = FALSE)
```

```{r}
 # merged_bus_dec <- read_rds("data/rds/merged_bus_dec.rds")
 # write.csv(merged_bus_dec, file = "data/merged_bus_dec.csv", row.names = FALSE)
```

```{r}
# merged_bus_jan <- read_rds("data/rds/merged_bus_jan.rds")
# write.csv(merged_bus_jan, file = "data/merged_bus_jan.csv", row.names = FALSE)
```

```{r}
 # bus_coords_subzone <- read_rds("data/rds/bus_coords_subzone.rds")
 # write.csv(bus_coords_subzone, file = "data/bus_coords_subzone.csv", row.names = FALSE)
```

\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

# **2.0 Visualising Places of Interest**

Our POIs include:

-   Business

-   Financial Institutions

-   Entertainment

-   F&B Outlets

-   Leisure & Recreation Spots

-   Retail Shops

-   Schools

-   Hospitals and Polyclinic

-   Residential Areas

## **Business**

```{r}
tmap_mode('view')
tm_shape(business) + 
  tm_bubbles(col = 'blue', size = 0.001, alpha = 0.5, border.col = "lightgrey")
```

## **Financial Institutions**

```{r}
tmap_mode('view')
tm_shape(fininst) + 
  tm_bubbles(col = 'red', size = 0.001, alpha = 0.5, border.col = "lightgrey")
```

## **Entertainment**

```{r}
tmap_mode('view')
tm_shape(entertainment) + 
  tm_bubbles(col = 'black', size = 0.001, alpha = 0.5, border.col = "lightgrey")
```

## **F&B Outlets**

```{r}
tmap_mode('view')
tm_shape(f_and_b) + 
  tm_bubbles(col = 'green', size = 0.001, alpha = 0.5, border.col = "lightgrey")
```

## **Leisure & Recreation Spots**

```{r}
tmap_mode('view')
tm_shape(leisure) + 
  tm_bubbles(col = 'orange', size = 0.001, alpha = 0.5, border.col = "lightgrey")
```

## **Retail Shops**

```{r}
tmap_mode('view')
tm_shape(retail) + 
  tm_bubbles(col = 'purple', size = 0.001, alpha = 0.5, border.col = "lightgrey")
```

## **Schools**

```{r}
schools <- schools %>%
  separate(latlong, into = c("latitude", "longitude"), sep = ",", convert = TRUE)

schools <- st_as_sf(schools, coords = c("longitude","latitude"), crs = 4326) %>% 
  st_transform(crs=3414)
```

```{r}
tmap_mode('view')
tm_shape(schools) + 
  tm_bubbles(col = 'turquoise', size = 0.001, alpha = 0.5, border.col = "lightgrey")
```

## Hospitals and Polyclinics

```{r}
hospitals1 <- st_as_sf(hospitals[1:42,], wkt = "geometry", crs = 4326) %>% 
  st_transform(crs=3414)

hospitals2 <- st_as_sf(hospitals[43:1235,], wkt = "geometry", crs = 3414)

hospitals <- rbind(hospitals1, hospitals2)
```

```{r}
#| eval: false
tmap_mode('view')
tm_shape(hospitals1) + 
  tm_bubbles(col = 'lavender', size = 0.001, alpha = 0.5, border.col = "lightgrey")
```

## Residential Areas

```{r}
residential <- st_as_sf(hdb, coords = c("lng", "lat"), crs = 4326)
```

```{r}
tmap_mode('view')
tm_shape(residential) + 
  tm_bubbles(col = 'pink', size = 0.001, alpha = 0.5, border.col = "lightgrey")
```

# 2.1 Shiny Storyboard (POIs)

This tab allows the user to see a map that helps them to visualise the distribution of their chosen place of interest across Singapore.

![](poi_shiny.png){fig-align="center"}

**Calibration Parameters**

| Parameter          | Type                    | Filter Options                                                                                                                                                                        |
|--------------------|-------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Spatial Unit       | Single Select, dropdown | `subzone layer` , `analytical hexagon`                                                                                                                                                |
| Places of Interest | Multi-select, dropdown  | `All`, `Business`, `Financial Institutions`, `Entertainment`, `F&B Outlets`, `Leisure & Recreation Spots`, `Retail Shops`, `Schools`, `Hospitals and Polyclinic`, `Residential Areas` |
| Area of Interest   | Multi-select, dropdown  | `Singapore` , `specific subzone`                                                                                                                                                      |

# 3.0 Visualising Bus Stops in Singapore

```{r}
tmap_mode('view')
tm_shape(sg_bus) + 
  tm_bubbles(col = 'red', size = 0.01, alpha = 1, border.col = "lightgrey")+
  tm_shape(mpsz_sf) +
tm_polygons(alpha = 0.1, id = "PLN_AREA_N")+
    tmap_options(check.and.fix = TRUE)
```

# 3.1 Shiny Storyboard (Bus Stops)

This tab allows the user to see a map that helps them to visualise the distribution of bus stops across Singapore.

![](busstop_shiny.png){fig-align="center"}

**Calibration Parameters**

| Parameter        | Type                    | Filter Options                          |
|------------------|-------------------------|-----------------------------------------|
| Spatial Unit     | Single Select, dropdown | `subzone layer` , `analytical hexagon`  |
| Bus Stop Code    | Multi-select, dropdown  | `All`, `specific bus stop`              |
| Area of Interest | Multi-select, dropdown  | `Singapore` , `specific subzone`        |

# 4.0 Choropleth Map of Population

## Data Preparation

```{r}
population <- population %>%
  filter(Time == 2020) %>%
  group_by(PA, SZ, AG) %>%
  summarise(`POP` = sum(`Pop`)) %>%
  ungroup()%>%
  pivot_wider(names_from=AG, 
              values_from=POP) %>%
  mutate(YOUNG = rowSums(.[3:6])
         +rowSums(.[12])) %>%
mutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+
rowSums(.[13:15]))%>%
mutate(`AGED`=rowSums(.[16:21])) %>%
mutate(`TOTAL`=rowSums(.[3:21])) %>%  
mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)
/`ECONOMY ACTIVE`) %>%
  select(`PA`, `SZ`, `YOUNG`, 
       `ECONOMY ACTIVE`, `AGED`, 
       `TOTAL`, `DEPENDENCY`)
```

```{r}
population <- population %>%
  mutate_at(.vars = vars(PA, SZ), 
          .funs = list(toupper)) %>%
  filter(`ECONOMY ACTIVE` > 0)

```

```{r}
mpsz_population <- left_join(mpsz_sf, population,
                          by = c("SUBZONE_N" = "SZ"))
```

## Young Population

```{r}
tmap_mode('view')
tm_shape(mpsz_population)+
  tm_polygons("YOUNG", 
              style = "quantile", 
              palette = "Greens")
```

## Economically Active Population

```{r}
tmap_mode('view')
tm_shape(mpsz_population)+
  tm_polygons("ECONOMY ACTIVE", 
              style = "quantile", 
              palette = "Oranges")
```

## Aged Population

```{r}
tmap_mode('view')
tm_shape(mpsz_population)+
  tm_polygons("AGED", 
              style = "quantile", 
              palette = "Reds")
```

## Total Population

```{r}
tmap_mode('view')
tm_shape(mpsz_population)+
  tm_polygons("TOTAL", 
              style = "quantile", 
              palette = "Blues")
```

# 4.1 Shiny Storyboard (Population Map)

This tab allows the user to visualise the distribution of various age groups in different subzones of Singapore.

![](pop_shiny.png){fig-align="center"}

**Calibration Parameters**

| Parameter        | Type                    | Filter Options                                  |
|------------------|-------------------------|-------------------------------------------------|
| Spatial Unit     | Single Select, dropdown | `subzone layer` , `analytical hexagon`          |
| Age Group        | Multi-select, dropdown  | `Total`, `young`, `economically active`, `aged` |
| Area of Interest | Multi-select, dropdown  | `Singapore` , `specific subzone`                |

# 5.0 Passenger Volume Trend

## Function to Create Graph

```{r}
create_graph <- function(filename, plot_title, day_type) {
  data <- read.csv(filename) %>%
    filter(DAY_TYPE == day_type) %>%
    select(ORIGIN_PT_CODE, TIME_PER_HOUR, TOTAL_TRIPS, ORIGIN_LAT, ORIGIN_LONG) %>%
    group_by(ORIGIN_PT_CODE, TIME_PER_HOUR) %>%
    summarise(TRIPS_GENERATED = sum(TOTAL_TRIPS)) %>%
    ungroup()
  
  data$TIME_INTERVAL <- as.factor(data$TIME_PER_HOUR)
  
  ggplot(data, aes(x=TIME_INTERVAL, y=TRIPS_GENERATED)) +
    geom_bar(stat="identity", fill="deepskyblue4") +
    ggtitle(plot_title) +
    xlab("Time Interval") +
    ylab("Total Trips")
}
```

## **Weekday Trend**

## November 2023

```{r}
nov_day <- create_graph("data/merged_bus_nov.csv", "November 2023 Weekday", "WEEKDAY")
nov_day
```

## December 2023

```{r}
dec_day <- create_graph("data/merged_bus_dec.csv", "December 2023 Weekday", "WEEKDAY")
dec_day
```

## January 2024

```{r}
jan_day <- create_graph("data/merged_bus_jan.csv", "January 2024 Weekday", "WEEKDAY")
jan_day
```

## **Weekend Trend**

## November 2023

```{r}
nov_end <- create_graph("data/merged_bus_nov.csv", "November 2023 Weekend", "WEEKENDS/HOLIDAY")
nov_end
```

## December 2023

```{r}
dec_end <- create_graph("data/merged_bus_dec.csv", "December 2023 Weekend", "WEEKENDS/HOLIDAY")
dec_end
```

## January 2024

```{r}
jan_end <- create_graph("data/merged_bus_jan.csv", "January 2024 Weekend", "WEEKENDS/HOLIDAY")
jan_end
```

# 5.1 Shiny Storyboard (Passenger Volume)

This tab allows the user to observe the trends in passenger volume for buses during a selected month and time. This helps identify the peak times when the highest number of trips occur.

![](pass_vol_shiny.png)

**Calibration Parameters**

| Parameter         | Type                    | Filter Options                                   |
|-------------------|-------------------------|--------------------------------------------------|
| Month of Interest | Single Select, dropdown | `November 2023`, `December 2023`, `January 2024` |
| Day type          | Single Select, dropdown | `Weekday`, `Weekend`                             |

# 6.0 Most and Least Popular Stations during Peak Hours

## Function to Find Popular Stations

```{r}
t5b5 <- function(filename, plot_title, day_type, time_interval){
  
  df <- edges <- read_csv(filename) %>% 
  filter(DAY_TYPE == day_type & TIME_PER_HOUR %in% time_interval) %>%
  group_by(ORIGIN_PT_CODE) %>%
  summarise(TRIPS_GENERATED = sum(TOTAL_TRIPS)) %>%
  na.omit() %>%
  arrange(desc(TRIPS_GENERATED))
  
  t5 <- df %>%
    head(5) %>%
    rename(top_5 = ORIGIN_PT_CODE, top_5_trip_count = TRIPS_GENERATED)
  
  b5 <- df %>%
    tail(5) %>%
    rename(bot_5 = ORIGIN_PT_CODE, bot_5_trip_count = TRIPS_GENERATED)

  return(cbind(t5, b5))
}
```

## November 2023 Weekday Top 5 Most and Least Popular Stations by Time of Day

```{r}
nov_day_trip <- t5b5("data/merged_bus_nov.csv", "Top 5 stations for November 2023 Weekdays", "WEEKDAY", c(6, 7, 17, 18))
nov_day_morn <- t5b5("data/merged_bus_nov.csv", "Top 5 stations for November 2023 Weekdays 6am - 8am", "WEEKDAY", c(6, 7))
nov_day_eve <- t5b5("data/merged_bus_nov.csv", "Top 5 stations for November 2023 Weekdays 5pm - 7pm", "WEEKDAY", c(17, 18))

nov_day_trip

```

## December 2023 Weekday Top 5 Most and Least Popular Stations by Time of Day

```{r}
dec_day_trip <- t5b5("data/merged_bus_dec.csv", "Top 5 stations for December 2023 Weekdays", "WEEKDAY", c(6, 7, 17, 18))
dec_day_morn <- t5b5("data/merged_bus_dec.csv", "Top 5 stations for December 2023 Weekdays 6am - 8am", "WEEKDAY", c(6, 7))
dec_day_eve <- t5b5("data/merged_bus_dec.csv", "Top 5 stations for December 2023 Weekdays 5pm - 7pm", "WEEKDAY", c(17, 18))
```

## January 2024 Weekday Top 5 Most and Least Popular Stations by Time of Day

```{r}
jan_day_trip <- t5b5("data/merged_bus_jan.csv", "Top 5 stations for January 2024 Weekdays", "WEEKDAY", c(6, 7, 17, 18))
jan_day_morn <- t5b5("data/merged_bus_jan.csv", "Top 5 stations for January 2024 Weekdays 6am - 8am", "WEEKDAY", c(6, 7))
jan_day_eve <- t5b5("data/merged_bus_jan.csv", "Top 5 stations for January 2024 Weekdays 5pm - t5b5", "WEEKDAY", c(17, 18))
```

## November 2023 Weekend Top 5 Most and Least Popular Stations by Time of Day

```{r}
nov_end_trip <- t5b5("data/merged_bus_nov.csv", "Top 5 stations for November 2023 Weekends", "WEEKENDS/HOLIDAY", c(11, 12, 16, 17))
nov_end_morn <- t5b5("data/merged_bus_nov.csv", "Top 5 stations for November 2023 Weekends 11am - 1pm", "WEEKENDS/HOLIDAY", c(11, 12))
nov_end_eve <- t5b5("data/merged_bus_nov.csv", "Top 5 stations for November 2023 Weekends 4pm - 6pm", "WEEKENDS/HOLIDAY", c(16, 17))
```

## December 2023 Weekend Top 5 Most and Least Popular Stations by Time of Day

```{r}
dec_end_trip <- t5b5("data/merged_bus_dec.csv", "Top 5 stations for December 2023 Weekends", "WEEKENDS/HOLIDAY", c(11, 12, 16, 17))
dec_end_morn <- t5b5("data/merged_bus_dec.csv", "Top 5 stations for December 2023 Weekends 11am - 1pm", "WEEKENDS/HOLIDAY", c(11, 12))
dec_end_eve <- t5b5("data/merged_bus_dec.csv", "Top 5 stations for December 2023 Weekends 4pm - 6pm", "WEEKENDS/HOLIDAY", c(16, 17))
```

## January 2024 Weekend Top 5 Most and Least Popular Stations by Time of Day

```{r}
jan_end_trip <- t5b5("data/merged_bus_jan.csv", "Top 5 stations for January 2024 Weekends", "WEEKENDS/HOLIDAY", c(11, 12, 16, 17))
jan_end_morn <- t5b5("data/merged_bus_jan.csv", "Top 5 stations for January 2024 Weekends 11am - 1pm", "WEEKENDS/HOLIDAY", c(11, 12))
jan_end_evep <- t5b5("data/merged_bus_jan.csv", "Top 5 stations for January 2024 Weekends 4pm - 6pm", "WEEKENDS/HOLIDAY", c(16, 17))
```

## Heatmap

### November 2023 Weekday Origin

```{r}
trips_by_origin <- bus_nov %>%
  filter(DAY_TYPE == "WEEKDAY" & TIME_PER_HOUR >= 6 & TIME_PER_HOUR <= 23) %>%
  group_by(TIME_PER_HOUR, ORIGIN_PT_CODE) %>%
  summarise(TOTAL_TRIPS = sum(TOTAL_TRIPS)) %>%
  ungroup()

kable(head(trips_by_origin), format = "html", digits = 2)

p <- ggplot(data = trips_by_origin,
            aes(x = TIME_PER_HOUR, y = ORIGIN_PT_CODE, fill = TOTAL_TRIPS)) +
  geom_tile() +
  scale_fill_distiller(palette = "Spectral", name = "Passenger Volume") +
  labs(x = NULL, y = NULL,
       title = "November 2023 Weekday Passenger Volume by Time of Day and Origin Station") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        plot.title = element_text(hjust = 0.5)) +
  scale_x_continuous(breaks = seq(6, 23, by = 1))

print(p)
```

### November 2023 Weekday Destination

```{r}
trips_by_dest <- bus_nov %>%
  filter(DAY_TYPE == "WEEKDAY" & TIME_PER_HOUR >= 6 & TIME_PER_HOUR <= 23) %>%
  group_by(TIME_PER_HOUR, DESTINATION_PT_CODE) %>%
  summarise(TOTAL_TRIPS = sum(TOTAL_TRIPS)) %>%
  ungroup()

kable(head(trips_by_dest), format = "html", digits = 2)

p <- ggplot(data = trips_by_dest,
            aes(x = TIME_PER_HOUR, y = DESTINATION_PT_CODE, fill = TOTAL_TRIPS)) +
  geom_tile() +
  scale_fill_distiller(palette = "Spectral", name = "Passenger Volume") +
  labs(x = NULL, y = NULL,
       title = "November 2023 Weekday Passenger Volume by Time of Day and Destination Station") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        plot.title = element_text(hjust = 0.5)) +
  scale_x_continuous(breaks = seq(6, 23, by = 1))

print(p)

```

### November 2023 Weekend Origin

```{r}
trips_by_origin <- bus_nov %>%
  filter(DAY_TYPE == "WEEKENDS/HOLIDAY" & TIME_PER_HOUR >= 6 & TIME_PER_HOUR <= 23) %>%
  group_by(TIME_PER_HOUR, ORIGIN_PT_CODE) %>%
  summarise(TOTAL_TRIPS = sum(TOTAL_TRIPS)) %>%
  ungroup()

kable(head(trips_by_origin), format = "html", digits = 2)

p <- ggplot(data = trips_by_origin,
            aes(x = TIME_PER_HOUR, y = ORIGIN_PT_CODE, fill = TOTAL_TRIPS)) +
  geom_tile() +
  scale_fill_distiller(palette = "Spectral", name = "Passenger Volume") +
  labs(x = NULL, y = NULL,
       title = "November 2023 Weekend Passenger Volume by Time of Day and Origin Station") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        plot.title = element_text(hjust = 0.5)) +
  scale_x_continuous(breaks = seq(6, 23, by = 1))

print(p)
```

### November 2023 Weekend Destination

```{r}
trips_by_dest <- bus_nov %>%
  filter(DAY_TYPE == "WEEKENDS/HOLIDAY" & TIME_PER_HOUR >= 6 & TIME_PER_HOUR <= 23) %>%
  group_by(TIME_PER_HOUR, DESTINATION_PT_CODE) %>%
  summarise(TOTAL_TRIPS = sum(TOTAL_TRIPS)) %>%
  ungroup()

kable(head(trips_by_dest), format = "html", digits = 2)

p <- ggplot(data = trips_by_dest,
            aes(x = TIME_PER_HOUR, y = DESTINATION_PT_CODE, fill = TOTAL_TRIPS)) +
  geom_tile() +
  scale_fill_distiller(palette = "Spectral", name = "Passenger Volume") +
  labs(x = NULL, y = NULL,
       title = "November 2023 Weekend Passenger Volume by Time of Day and Destination Station") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        plot.title = element_text(hjust = 0.5)) +
  scale_x_continuous(breaks = seq(6, 23, by = 1))

print(p)
```

# 6.1 Shiny Storyboard (Popular Stations) 

This tab provides insights into the popularity of various bus stops during the chosen month, time, and day type. It allows the user to discern which bus stops are the most and least frequented.

![](pop_station_shiny.png){fig-align="center"}

**Calibration Parameters**

| Parameter         | Type                    | Filter Options                                   |
|-------------------|-------------------------|--------------------------------------------------|
| Month of Interest | Single Select, dropdown | `November 2023`, `December 2023`, `January 2024` |
| Day type          | Single Select, dropdown | `Weekday`, `Weekend`                             |
| Time of Day       | Single Select, dropdown | `Morning`, `Evening`                             |
| Popularity        | Single Select, dropdown | `Most Popular`, `Least Popular`                  |
| Heatmap           | Single Select, dropdown | `True`, `False`                                  |

# 7.0 Network analysis

## Set Nodes for Network Graph

```{r}
nodes_xy <- bus_coords_subzone %>%
  select(Longitude, Latitude) %>%
  rename(x = Longitude, y = Latitude)
```

## Function to Create Weighted Graph

```{r}
create_weighted_graph <- function(fn, origin, day, time_period, title) {
  
  edges <- read_csv(fn) %>% 
    filter(ORIGIN_PT_CODE == origin & DAY_TYPE == day & TIME_PER_HOUR %in% time_period) %>%
    rename(weight = "TOTAL_TRIPS") %>%
    select(ORIGIN_PT_CODE, DESTINATION_PT_CODE, weight) %>%
    na.omit()
  
  if (nrow(edges) == 0) {
    stop("No data found for the specified criteria.")
  }
  
  if (nrow(bus_coords_subzone) == 0) {
    stop("No nodes data found.")
  }
  
  tr_graph <- graph_from_data_frame(edges, directed = TRUE, vertices = bus_coords_subzone)
  
ggraph(tr_graph, layout = "kk") +
    geom_edge_arc(aes(edge_width = weight), curvature = 0.33, alpha = 0.1) +
    scale_edge_width_continuous(range = c(0.5, 8), guide = "none") +  
    geom_node_point(aes(x = x, y = y)) +
    ggtitle(title)
}
```

```{r}
create_weighted_graph("data/merged_bus_jan.csv", "46009", "WEEKDAY", c(6, 7), "January Weekday Woodlands Int Bus Stop 6am - 8am")

create_weighted_graph("data/merged_bus_jan.csv", "22009", "WEEKDAY", c(17, 18), "January Weekday Boon Lay Int Bus Stop 5pm - 7pm")
```

# 7.1 Shiny Storyboard (Network Graph)

This tab allows the user to visualize the flow of activity for the selected bus stop during the chosen month, time, and day type.

![](network_shiny.png){fig-align="center"}

**Calibration Parameters**

| Parameter         | Type                    | Filter Options                                   |
|-------------------|-------------------------|--------------------------------------------------|
| Month of Interest | Single Select, dropdown | `November 2023`, `December 2023`, `January 2024` |
| Day type          | Single Select, dropdown | `Weekday`, `Weekend`                             |
| Time of Day       | Single Select, dropdown | `Morning`, `Evening`                             |
| Bus Stop Code     | Multi-select, dropdown  | `All bus stops`, `specific bus stop`             |

## Centrality Index

```{r}
edges1 <- read_csv("data/merged_bus_jan.csv") %>%
  rename(weight = "TOTAL_TRIPS") %>%
  select(ORIGIN_PT_CODE, DESTINATION_PT_CODE, weight) %>%
  na.omit()

tr_graph1 <- graph_from_data_frame(edges1, directed = TRUE, vertices = bus_coords_subzone)

tr_graph1 <- set_vertex_attr(tr_graph1, "betweenness_centrality", value = betweenness(tr_graph1))
```

# 8.0 Betweenness Centrality for Bus Stations

```{r}
g <- tr_graph1 %>%
  ggraph(layout = "nicely") + 
  geom_node_point(aes(size = betweenness_centrality, alpha = 0.5)) +
  geom_node_text(aes(label = ifelse(rank(-betweenness_centrality) <= 5, sub("\\s*(BUS)\\s+STATION", "", Description), ""), size = 12)) +
  theme_graph() +
  labs(title = "Betweenness Centrality of Bus Stations")

print(g)
```

# 8.1 Shiny Storyboard (Betweeness Centrality)

This tab provides a visual representation of the betweenness centrality of bus stops, allowing for a clearer understanding of their importance in the network.

![](between_shiny.png){fig-align="center"}

**Calibration Parameters**

| Parameter         | Type                    | Filter Options                                   |
|-------------------|-------------------------|--------------------------------------------------|
| Month of Interest | Single Select, dropdown | `November 2023`, `December 2023`, `January 2024` |
| Bus Stop Code     | Multi-Select, dropdown  | `All bus stops`, `specific bus stop`             |

# 9.0 Correlation Matrix

## Function to Calculate Sum of Trips

```{r}
calculate_sum_of_trips_202311_WD <- function(merged_bus_nov) {
  data_filtered <- subset(merged_bus_nov, DAY_TYPE == "WEEKDAY" & TIME_PER_HOUR >= 6 & TIME_PER_HOUR <= 23)
  sum_data <- aggregate(TOTAL_TRIPS ~ TIME_PER_HOUR + ORIGIN_PT_CODE + DESTINATION_PT_CODE, data = data_filtered, sum)
  return(sum_data)
}

calculate_sum_of_trips_202311_WE <- function(merged_bus_nov) {
  data_filtered <- subset(merged_bus_nov, DAY_TYPE == "WEEKENDS/HOLIDAY" & TIME_PER_HOUR >= 6 & TIME_PER_HOUR <= 23)
  sum_data <- aggregate(TOTAL_TRIPS ~ TIME_PER_HOUR + ORIGIN_PT_CODE + DESTINATION_PT_CODE
, data = data_filtered, sum)
  return(sum_data)
}
```

```{r}
WD_202311 <- calculate_sum_of_trips_202311_WD(merged_bus_nov)

WE_202311 <- calculate_sum_of_trips_202311_WE(merged_bus_nov)

```

## Data Transformation using Pivot Wider

```{r}
pivot_wider(
  WD_202311,
  id_cols = NULL,
  id_expand = FALSE,
  names_from = "DESTINATION_PT_CODE",
  names_prefix = "",
  names_sep = "_",
  names_glue = NULL,
  names_sort = FALSE,
  names_vary = "fastest",
  names_expand = FALSE,
  names_repair = "check_unique",
  values_from = "TOTAL_TRIPS",
  values_fill = NULL,
  values_fn = NULL,
  unused_fn = NULL
)

pivot_wider(
  WE_202311,
  id_cols = NULL,
  id_expand = FALSE,
  names_from = "DESTINATION_PT_CODE",
  names_prefix = "",
  names_sep = "_",
  names_glue = NULL,
  names_sort = FALSE,
  names_vary = "fastest",
  names_expand = FALSE,
  names_repair = "check_unique",
  values_from = "TOTAL_TRIPS",
  values_fill = NULL,
  values_fn = NULL,
  unused_fn = NULL
)
```

## Correlation Analysis

```{r}
cor_data <- dcast(WD_202311, ORIGIN_PT_CODE ~ DESTINATION_PT_CODE, value.var = "TOTAL_TRIPS",fun.aggregate = sum, fill = 0)

cor_data <- dcast(WD_202311, ORIGIN_PT_CODE ~ DESTINATION_PT_CODE, value.var = "TOTAL_TRIPS",fun.aggregate = sum, fill = 0)

correlation_matrix_WD202311 <- cor(cor_data[, -1])

print(correlation_matrix_WD202311)

corrplot(correlation_matrix_WD202311, method = "color")

```

```{r}
#| eval: false

cor_data <- dcast(WE_202311, ORIGIN_PT_CODE ~ DESTINATION_PT_CODE, value.var = "TOTAL_TRIPS",fun.aggregate = sum, fill = 0)

cor_data <- dcast(WE_202311, ORIGIN_PT_CODE ~ DESTINATION_PT_CODE, value.var = "TOTAL_TRIPS",fun.aggregate = sum, fill = 0)

correlation_matrix_WE202311 <- cor(cor_data[, -1])

print(correlation_matrix_WE202311)

corrplot(correlation_matrix_WE202311, method = "color")
```

```{r}
options(repr.plot.width = 8, repr.plot.height = 6)

corrplot(correlation_matrix_WD202311, method = "color",
         tl.cex = 0.2,       
         cl.cex = 0.2,       
         tl.col = "black",   
         col = colorRampPalette(c("blue", "white", "red"))(100),  
         title = "Correlation Matrix WD_202311")
```

```{r}
#| eval: false

options(repr.plot.width = 8, repr.plot.height = 6)

corrplot(correlation_matrix_WE202311, method = "color",
         tl.cex = 0.2,       
         cl.cex = 0.2,       
         tl.col = "black",   
         col = colorRampPalette(c("blue", "white", "red"))(100),  
         title = "Correlation Matrix WE_202311")
```

## Plot Correlation Matrix

```{r}
heatmaply(normalize(correlation_matrix_WD202311),
          Colv=NA,
          seriate = "none",
          colors = Blues,
          k_row = 5,
          dendrogram = c("none"),
          margins = c(NA,10,60,NA),
          fontsize_row = 4,
          fontsize_col = 4,
          main="OD matrix",
          xlab = "Destination stations",
          ylab = "Origin stations"
          )
```

```{r}
#| eval: false
heatmaply(normalize(correlation_matrix_WE202311),
          Colv=NA,
          seriate = "none",
          colors = Blues,
          k_row = 5,
          dendrogram = c("none"),
          margins = c(NA,10,60,NA),
          fontsize_row = 4,
          fontsize_col = 4,
          main="OD matrix",
          xlab = "Destination stations",
          ylab = "Origin stations"
          )
```

# 9.1 Shiny Storyboard (Correlation Matrix)

This tab offers a visualisation of the correlation matrix, illustrating the interrelationships between selected bus stops during the chosen month, time, and day type.

![](adjacency_shiny.png){fig-align="center"}

**Calibration Parameters**

| Parameter                 | Type                    | Filter Options                                   |
|---------------------------|-------------------------|--------------------------------------------------|
| Month of Interest         | Single Select, dropdown | `November 2023`, `December 2023`, `January 2024` |
| Day type                  | Single Select, dropdown | `Weekday`, `Weekend`                             |
| Time of Day               | Single Select, dropdown | `Morning`, `Evening`                             |
| Origin Bus Stop Code      | Multi-select, dropdown  | `specific bus stop`                              |
| Destination Bus Stop Code | Multi-select, dropdown  | `specific bus stop`                              |

# 10.0 Emerging Hot Spot Analysis

```{r}
#| eval: false

#str(tg_spacetime)
```

```{r}
#| eval: false

ehsa_tg <- emerging_hotspot_analysis(nov_org_tg_spacetime, 
                          "TRIPS GENERATED", 
                          threshold = 0.05)

ggplot(data = ehsa_tg,
       aes(x = classification)) +
  geom_bar()

# neighbour list
nb <- st_knn(nov_trip_generation_origin, 
             k = 1, symmetric = FALSE)
head (nb)

# spatial weights
wt <- st_weights(nb, style = "W", allow_zero = NULL)

gi_stars <- local_gstar_perm(nov_org_tg_spacetime$'TRIPS GENERATED', nb, wt, nsim = 499, alternative = "two.sided")

kable(head(gi_stars, n=10))

ehsa_weekday <- nov_trip_generation_origin %>%
  cbind(gi_stars)
```

```{r}
#| eval: false
tmap_mode("view")

tm_shape(nov_trip_generation_origin)+
tm_bubbles(col = "red",
           size = 1,
           border.col = "black",
           border.lwd = 1)
```

## 10.1 Shiny Storyboard (EHSA)

This tab presents an emerging hot spot analysis for selected bus stops during the designated month, time, and day type, revealing areas of increased significance or activity.

![](ehsa_shiny.png){fig-align="center"}

**Calibration Parameters**

| Parameter         | Type                    | Filter Options                                   |
|-------------------|-------------------------|--------------------------------------------------|
| Month of Interest | Single Select, dropdown | `November 2023`, `December 2023`, `January 2024` |
| Day type          | Single Select, dropdown | `Weekday`, `Weekend`                             |
| Time of Day       | Single Select, dropdown | `Morning`, `Evening`                             |
| Bus Stop Code     | Single select, dropdown | `specific bus stop`                              |
